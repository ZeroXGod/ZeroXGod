<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PHP 第四周函数学习记录</title>
    <url>/2020/06/28/PHP-%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="curl-escape"><a href="#curl-escape" class="headerlink" title="curl_escape()"></a>curl_escape()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对给定的字符串进行URL编码。</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string curl_escape ( resource $ch , string $str )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个cURL句柄</span><br><span class="line">$ch &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 编码GET参数</span><br><span class="line">$location &#x3D; curl_escape($ch, &#39;Hofbräuhaus &#x2F; München&#39;);</span><br><span class="line">&#x2F;&#x2F; Result: Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 比较编码后的URL</span><br><span class="line">$url &#x3D; &quot;http:&#x2F;&#x2F;example.com&#x2F;add_location.php?location&#x3D;&#123;$location&#125;&quot;;</span><br><span class="line">&#x2F;&#x2F; Result: http:&#x2F;&#x2F;example.com&#x2F;add_location.php?location&#x3D;Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 发送HTTP请求并关闭句柄</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);</span><br><span class="line">curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>

<h3 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个函数应该在初始化一个cURL会话并且全部的选项都被设置后被调用</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mixed curl_exec ( resource $ch )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个cURL资源</span><br><span class="line">$ch &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.w3cschool.cc&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 抓取URL并把它传递给浏览器</span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭cURL资源，并且释放系统资源</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>

<h3 id="curl-file-create"><a href="#curl-file-create" class="headerlink" title="curl_file_create()"></a>curl_file_create()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建一个 CURLFile 对象, 用与上传文件</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CURLFile curl_file_create ( string $filename [, string $mimetype [, string $postname ]] )</span><br><span class="line">filename     上传文件的路径</span><br><span class="line">mimetype     文件的Mimetype</span><br><span class="line">postname     文件名</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个 cURL 句柄</span><br><span class="line">$ch &#x3D; curl_init(&#39;http:&#x2F;&#x2F;example.com&#x2F;upload.php&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建一个 CURLFile 对象</span><br><span class="line">$cfile &#x3D; curl_file_create(&#39;cats.jpg&#39;,&#39;image&#x2F;jpeg&#39;,&#39;test_name&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置 POST 数据</span><br><span class="line">$data &#x3D; array(&#39;test_file&#39; &#x3D;&gt; $cfile);</span><br><span class="line">curl_setopt($ch, CURLOPT_POST,1);</span><br><span class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行句柄</span><br><span class="line">curl_exec($ch);</span><br></pre></td></tr></table></figure>

<h3 id="curl-getinfo"><a href="#curl-getinfo" class="headerlink" title="curl_getinfo()"></a>curl_getinfo()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取最后一次传输的相关信息</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mixed curl_getinfo ( resource $ch [, int $opt &#x3D; 0 ] )</span><br><span class="line">ch 由 curl_init() 返回的 cURL 句柄。</span><br><span class="line">opt 这个参数可能是以下常量之一:</span><br><span class="line">    CURLINFO_EFFECTIVE_URL - 最后一个有效的URL地址</span><br><span class="line">    CURLINFO_HTTP_CODE - 最后一个收到的HTTP代码</span><br><span class="line">    CURLINFO_FILETIME - 远程获取文档的时间，如果无法获取，则返回值为&quot;-1&quot;</span><br><span class="line">    CURLINFO_TOTAL_TIME - 最后一次传输所消耗的时间</span><br><span class="line">    CURLINFO_NAMELOOKUP_TIME - 名称解析所消耗的时间</span><br><span class="line">    CURLINFO_CONNECT_TIME - 建立连接所消耗的时间</span><br><span class="line">    CURLINFO_PRETRANSFER_TIME - 从建立连接到准备传输所使用的时间</span><br><span class="line">    CURLINFO_STARTTRANSFER_TIME - 从建立连接到传输开始所使用的时间</span><br><span class="line">    CURLINFO_REDIRECT_TIME - 在事务传输开始前重定向所使用的时间</span><br><span class="line">    CURLINFO_SIZE_UPLOAD - 上传数据量的总值</span><br><span class="line">    CURLINFO_SIZE_DOWNLOAD - 下载数据量的总值</span><br><span class="line">    CURLINFO_SPEED_DOWNLOAD - 平均下载速度</span><br><span class="line">    CURLINFO_SPEED_UPLOAD - 平均上传速度</span><br><span class="line">    CURLINFO_HEADER_SIZE - header部分的大小</span><br><span class="line">    CURLINFO_HEADER_OUT - 发送请求的字符串</span><br><span class="line">    CURLINFO_REQUEST_SIZE - 在HTTP请求中有问题的请求的大小</span><br><span class="line">    CURLINFO_SSL_VERIFYRESULT - 通过设置CURLOPT_SSL_VERIFYPEER返回的SSL证书验证请求的结果</span><br><span class="line">    CURLINFO_CONTENT_LENGTH_DOWNLOAD - 从Content-Length: field中读取的下载内容长度</span><br><span class="line">    CURLINFO_CONTENT_LENGTH_UPLOAD - 上传内容大小的说明</span><br><span class="line">    CURLINFO_CONTENT_TYPE - 下载内容的Content-Type:值，NULL表示服务器没有发送有效的Content-Type: header</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个cURL句柄</span><br><span class="line">$ch &#x3D; curl_init(&#39;http:&#x2F;&#x2F;www.yahoo.com&#x2F;&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行</span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 检查是否有错误发生</span><br><span class="line">if(!curl_errno($ch))</span><br><span class="line">&#123;</span><br><span class="line"> $info &#x3D; curl_getinfo($ch);</span><br><span class="line"></span><br><span class="line"> echo &#39;Took &#39; . $info[&#39;total_time&#39;] . &#39; seconds to send a request to &#39; . $info[&#39;url&#39;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Close handle</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>


<h3 id="curl-init"><a href="#curl-init" class="headerlink" title="curl_init()"></a>curl_init()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化一个新的会话，返回一个cURL句柄，供curl_setopt(), curl_exec()和curl_close() 函数使用。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource curl_init ([ string $url &#x3D; NULL ] )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 创建一个新cURL资源</span><br><span class="line">$ch &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.runoob.com&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 抓取URL并把它传递给浏览器</span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭cURL资源，并且释放系统资源</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>

<h3 id="curl-multi-add-handle"><a href="#curl-multi-add-handle" class="headerlink" title="curl_multi_add_handle()"></a>curl_multi_add_handle()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向curl批处理会话中添加单独的curl句柄。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int curl_multi_add_handle ( resource $mh , resource $ch )</span><br><span class="line">mh 由 curl_multi_init() 返回的 cURL 多个句柄。</span><br><span class="line">ch 由 curl_init() 返回的 cURL 句柄。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一对cURL资源</span><br><span class="line">$ch1 &#x3D; curl_init();</span><br><span class="line">$ch2 &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">curl_setopt($ch1, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.w3cschool.cc&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch1, CURLOPT_HEADER, 0);</span><br><span class="line">curl_setopt($ch2, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.php.net&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch2, CURLOPT_HEADER, 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建批处理cURL句柄</span><br><span class="line">$mh &#x3D; curl_multi_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 增加2个句柄</span><br><span class="line">curl_multi_add_handle($mh,$ch1);</span><br><span class="line">curl_multi_add_handle($mh,$ch2);</span><br><span class="line"></span><br><span class="line">$running&#x3D;null;</span><br><span class="line">&#x2F;&#x2F; 执行批处理句柄</span><br><span class="line">do &#123;</span><br><span class="line">    curl_multi_exec($mh,$running);</span><br><span class="line">&#125; while($running &gt; 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭全部句柄</span><br><span class="line">curl_multi_remove_handle($mh, $ch1);</span><br><span class="line">curl_multi_remove_handle($mh, $ch2);</span><br><span class="line">curl_multi_close($mh);</span><br></pre></td></tr></table></figure>

<h3 id="curl-multi-close"><a href="#curl-multi-close" class="headerlink" title="curl_multi_close()"></a>curl_multi_close()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关闭一组cURL句柄</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void curl_multi_close ( resource $mh )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一对cURL资源</span><br><span class="line">$ch1 &#x3D; curl_init();</span><br><span class="line">$ch2 &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">curl_setopt($ch1, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.example.com&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch1, CURLOPT_HEADER, 0);</span><br><span class="line">curl_setopt($ch2, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.php.net&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch2, CURLOPT_HEADER, 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建批处理cURL句柄</span><br><span class="line">$mh &#x3D; curl_multi_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 增加2个句柄</span><br><span class="line">curl_multi_add_handle($mh,$ch1);</span><br><span class="line">curl_multi_add_handle($mh,$ch2);</span><br><span class="line"></span><br><span class="line">$running&#x3D;null;</span><br><span class="line">&#x2F;&#x2F; 执行批处理句柄</span><br><span class="line">do &#123;</span><br><span class="line">    curl_multi_exec($mh,$running);</span><br><span class="line">&#125; while ($running &gt; 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭全部句柄</span><br><span class="line">curl_multi_remove_handle($mh, $ch1);</span><br><span class="line">curl_multi_remove_handle($mh, $ch2);</span><br><span class="line">curl_multi_close($mh);</span><br></pre></td></tr></table></figure>

<h3 id="curl-multi-exec"><a href="#curl-multi-exec" class="headerlink" title="curl_multi_exec()"></a>curl_multi_exec()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行当前 cURL 句柄的子连接</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int curl_multi_exec ( resource $mh , int &amp;$still_running )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一对cURL资源</span><br><span class="line">$ch1 &#x3D; curl_init();</span><br><span class="line">$ch2 &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">curl_setopt($ch1, CURLOPT_URL, &quot;http:&#x2F;&#x2F;lxr.php.net&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch1, CURLOPT_HEADER, 0);</span><br><span class="line">curl_setopt($ch2, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.php.net&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch2, CURLOPT_HEADER, 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建批处理cURL句柄</span><br><span class="line">$mh &#x3D; curl_multi_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 增加2个句柄</span><br><span class="line">curl_multi_add_handle($mh,$ch1);</span><br><span class="line">curl_multi_add_handle($mh,$ch2);</span><br><span class="line"></span><br><span class="line">$active &#x3D; null;</span><br><span class="line">&#x2F;&#x2F; 执行批处理句柄</span><br><span class="line">do &#123;</span><br><span class="line">    $mrc &#x3D; curl_multi_exec($mh, $active);</span><br><span class="line">&#125; while ($mrc &#x3D;&#x3D; CURLM_CALL_MULTI_PERFORM);</span><br><span class="line"></span><br><span class="line">while ($active &amp;&amp; $mrc &#x3D;&#x3D; CURLM_OK) &#123;</span><br><span class="line">    if (curl_multi_select($mh) !&#x3D; -1) &#123;</span><br><span class="line">        do &#123;</span><br><span class="line">            $mrc &#x3D; curl_multi_exec($mh, $active);</span><br><span class="line">        &#125; while ($mrc &#x3D;&#x3D; CURLM_CALL_MULTI_PERFORM);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭全部句柄</span><br><span class="line">curl_multi_remove_handle($mh, $ch1);</span><br><span class="line">curl_multi_remove_handle($mh, $ch2);</span><br><span class="line">curl_multi_close($mh);</span><br></pre></td></tr></table></figure>

<h3 id="curl-multi-getcontent"><a href="#curl-multi-getcontent" class="headerlink" title="curl_multi_getcontent()"></a>curl_multi_getcontent()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string curl_multi_getcontent ( resource $ch )</span><br></pre></td></tr></table></figure>

<h3 id="curl-multi-info-read"><a href="#curl-multi-info-read" class="headerlink" title="curl_multi_info_read()"></a>curl_multi_info_read()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取当前解析的cURL的相关传输信息</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array curl_multi_info_read ( resource $mh [, int &amp;$msgs_in_queue &#x3D; NULL ] )</span><br><span class="line">msgs_in_queue  仍在队列中的消息数量。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$urls &#x3D; array(</span><br><span class="line">   &quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;,</span><br><span class="line">   &quot;http:&#x2F;&#x2F;www.google.com.hk&#x2F;&quot;,</span><br><span class="line">   &quot;http:&#x2F;&#x2F;www.w3cschool.cc&#x2F;&quot;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$mh &#x3D; curl_multi_init();</span><br><span class="line"></span><br><span class="line">foreach ($urls as $i &#x3D;&gt; $url) &#123;</span><br><span class="line">    $conn[$i] &#x3D; curl_init($url);</span><br><span class="line">    curl_setopt($conn[$i], CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">    curl_multi_add_handle($mh, $conn[$i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    $status &#x3D; curl_multi_exec($mh, $active);</span><br><span class="line">    $info &#x3D; curl_multi_info_read($mh);</span><br><span class="line">    if (false !&#x3D;&#x3D; $info) &#123;</span><br><span class="line">        var_dump($info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; while ($status &#x3D;&#x3D;&#x3D; CURLM_CALL_MULTI_PERFORM || $active);</span><br><span class="line"></span><br><span class="line">foreach ($urls as $i &#x3D;&gt; $url) &#123;</span><br><span class="line">    $res[$i] &#x3D; curl_multi_getcontent($conn[$i]);</span><br><span class="line">    curl_close($conn[$i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(curl_multi_info_read($mh));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array(3) &#123;</span><br><span class="line">  [&quot;msg&quot;]&#x3D;&gt;</span><br><span class="line">  int(1)</span><br><span class="line">  [&quot;result&quot;]&#x3D;&gt;</span><br><span class="line">  int(0)</span><br><span class="line">  [&quot;handle&quot;]&#x3D;&gt;</span><br><span class="line">  resource(5) of type (curl)</span><br><span class="line">&#125;</span><br><span class="line">array(3) &#123;</span><br><span class="line">  [&quot;msg&quot;]&#x3D;&gt;</span><br><span class="line">  int(1)</span><br><span class="line">  [&quot;result&quot;]&#x3D;&gt;</span><br><span class="line">  int(0)</span><br><span class="line">  [&quot;handle&quot;]&#x3D;&gt;</span><br><span class="line">  resource(7) of type (curl)</span><br><span class="line">&#125;</span><br><span class="line">array(3) &#123;</span><br><span class="line">  [&quot;msg&quot;]&#x3D;&gt;</span><br><span class="line">  int(1)</span><br><span class="line">  [&quot;result&quot;]&#x3D;&gt;</span><br><span class="line">  int(0)</span><br><span class="line">  [&quot;handle&quot;]&#x3D;&gt;</span><br><span class="line">  resource(6) of type (curl)</span><br><span class="line">&#125;</span><br><span class="line">bool(false)</span><br></pre></td></tr></table></figure>

<h3 id="curl-multi-init"><a href="#curl-multi-init" class="headerlink" title="curl_multi_init()"></a>curl_multi_init()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回一个新cURL批处理句柄</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource curl_multi_init ( void )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 创建一对cURL资源</span><br><span class="line">$ch1 &#x3D; curl_init();</span><br><span class="line">$ch2 &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">curl_setopt($ch1, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.example.com&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch1, CURLOPT_HEADER, 0);</span><br><span class="line">curl_setopt($ch2, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.php.net&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch2, CURLOPT_HEADER, 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建批处理cURL句柄</span><br><span class="line">$mh &#x3D; curl_multi_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 增加2个句柄</span><br><span class="line">curl_multi_add_handle($mh,$ch1);</span><br><span class="line">curl_multi_add_handle($mh,$ch2);</span><br><span class="line"></span><br><span class="line">$running&#x3D;null;</span><br><span class="line">&#x2F;&#x2F; 执行批处理句柄</span><br><span class="line">do &#123;</span><br><span class="line">    usleep(10000);</span><br><span class="line">    curl_multi_exec($mh,$running);</span><br><span class="line">&#125; while ($running &gt; 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭全部句柄</span><br><span class="line">curl_multi_remove_handle($mh, $ch1);</span><br><span class="line">curl_multi_remove_handle($mh, $ch2);</span><br><span class="line">curl_multi_close($mh);</span><br></pre></td></tr></table></figure>


<h3 id="curl-multi-remove-handle"><a href="#curl-multi-remove-handle" class="headerlink" title="curl_multi_remove_handle()"></a>curl_multi_remove_handle()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">移除curl批处理句柄资源中的某个句柄资源</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int curl_multi_remove_handle ( resource $mh , resource $ch )</span><br></pre></td></tr></table></figure>

<h3 id="curl-multi-select"><a href="#curl-multi-select" class="headerlink" title="curl_multi_select()"></a>curl_multi_select()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">等待所有cURL批处理中的活动连接</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int curl_multi_select ( resource $mh [, float $timeout &#x3D; 1.0 ] )</span><br></pre></td></tr></table></figure>

<h3 id="curl-multi-setopt"><a href="#curl-multi-setopt" class="headerlink" title="curl_multi_setopt()"></a>curl_multi_setopt()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置一个批处理cURL传输选项</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool curl_multi_setopt ( resource $mh , int $option , mixed $value )</span><br><span class="line"></span><br><span class="line">option     </span><br><span class="line">            CURLOPT_AUTOREFERER	当根据Location:重定向时，自动设置header中的Referer:信息。	</span><br><span class="line">            CURLOPT_BINARYTRANSFER	在启用CURLOPT_RETURNTRANSFER的时候，返回原生的（Raw）输出。	</span><br><span class="line">            CURLOPT_COOKIESESSION	启用时curl会仅仅传递一个session cookie，忽略其他的cookie，默认状况下cURL会将所有的cookie返回给服务端。session cookie是指那些用来判断服务器端的session是否有效而存在的cookie。	</span><br><span class="line">            CURLOPT_CRLF	启用时将Unix的换行符转换成回车换行符。	</span><br><span class="line">            CURLOPT_DNS_USE_GLOBAL_CACHE	启用时会启用一个全局的DNS缓存，此项为线程安全的，并且默认启用。	</span><br><span class="line">            CURLOPT_FAILONERROR	显示HTTP状态码，默认行为是忽略编号小于等于400的HTTP信息。	</span><br><span class="line">            CURLOPT_FILETIME	启用时会尝试修改远程文档中的信息。结果信息会通过curl_getinfo()函数的CURLINFO_FILETIME选项返回。 curl_getinfo().	</span><br><span class="line">            CURLOPT_FOLLOWLOCATION	启用时会将服务器服务器返回的&quot;Location: &quot;放在header中递归的返回给服务器，使用CURLOPT_MAXREDIRS可以限定递归返回的数量。	</span><br><span class="line">            CURLOPT_FORBID_REUSE	在完成交互以后强迫断开连接，不能重用。	</span><br><span class="line">            CURLOPT_FRESH_CONNECT	强制获取一个新的连接，替代缓存中的连接。	</span><br><span class="line">            CURLOPT_FTP_USE_EPRT	启用时当FTP下载时，使用EPRT (或 LPRT)命令。设置为FALSE时禁用EPRT和LPRT，使用PORT命令 only.	</span><br><span class="line">            CURLOPT_FTP_USE_EPSV	启用时，在FTP传输过程中回复到PASV模式前首先尝试EPSV命令。设置为FALSE时禁用EPSV命令。	</span><br><span class="line">            CURLOPT_FTPAPPEND	启用时追加写入文件而不是覆盖它。	</span><br><span class="line">            CURLOPT_FTPASCII	CURLOPT_TRANSFERTEXT的别名。	</span><br><span class="line">            CURLOPT_FTPLISTONLY	启用时只列出FTP目录的名字。	</span><br><span class="line">            CURLOPT_HEADER	启用时会将头文件的信息作为数据流输出。	</span><br><span class="line">            CURLINFO_HEADER_OUT	启用时追踪句柄的请求字符串。	从 PHP 5.1.3 开始可用。CURLINFO_前缀是故意的(intentional)。</span><br><span class="line">            CURLOPT_HTTPGET	启用时会设置HTTP的method为GET，因为GET是默认是，所以只在被修改的情况下使用。	</span><br><span class="line">            CURLOPT_HTTPPROXYTUNNEL	启用时会通过HTTP代理来传输。	</span><br><span class="line">            CURLOPT_MUTE	启用时将cURL函数中所有修改过的参数恢复默认值。	</span><br><span class="line">            CURLOPT_NETRC	在连接建立以后，访问~&#x2F;.netrc文件获取用户名和密码信息连接远程站点。	</span><br><span class="line">            CURLOPT_NOBODY	启用时将不对HTML中的BODY部分进行输出。	</span><br><span class="line">            CURLOPT_NOPROGRESS	</span><br><span class="line">            启用时关闭curl传输的进度条，此项的默认设置为启用。</span><br><span class="line">            </span><br><span class="line">            Note:</span><br><span class="line">            </span><br><span class="line">            PHP自动地设置这个选项为TRUE，这个选项仅仅应当在以调试为目的时被改变。</span><br><span class="line">            </span><br><span class="line">            CURLOPT_NOSIGNAL	启用时忽略所有的curl传递给php进行的信号。在SAPI多线程传输时此项被默认启用。	cURL 7.10时被加入。</span><br><span class="line">            CURLOPT_POST	启用时会发送一个常规的POST请求，类型为：application&#x2F;x-www-form-urlencoded，就像表单提交的一样。	</span><br><span class="line">            CURLOPT_PUT	启用时允许HTTP发送文件，必须同时设置CURLOPT_INFILE和CURLOPT_INFILESIZE。	</span><br><span class="line">            CURLOPT_RETURNTRANSFER	将curl_exec()获取的信息以文件流的形式返回，而不是直接输出。	</span><br><span class="line">            CURLOPT_SSL_VERIFYPEER	禁用后cURL将终止从服务端进行验证。使用CURLOPT_CAINFO选项设置证书使用CURLOPT_CAPATH选项设置证书目录 如果CURLOPT_SSL_VERIFYPEER(默认值为2)被启用，CURLOPT_SSL_VERIFYHOST需要被设置成TRUE否则设置为FALSE。	自cURL 7.10开始默认为TRUE。从cURL 7.10开始默认绑定安装。</span><br><span class="line">            CURLOPT_TRANSFERTEXT	启用后对FTP传输使用ASCII模式。对于LDAP，它检索纯文本信息而非HTML。在Windows系统上，系统不会把STDOUT设置成binary模式。	</span><br><span class="line">            CURLOPT_UNRESTRICTED_AUTH	在使用CURLOPT_FOLLOWLOCATION产生的header中的多个locations中持续追加用户名和密码信息，即使域名已发生改变。	</span><br><span class="line">            CURLOPT_UPLOAD	启用后允许文件上传。	</span><br><span class="line">            CURLOPT_VERBOSE	启用时会汇报所有的信息，存放在STDERR或指定的CURLOPT_STDERR中。</span><br></pre></td></tr></table></figure>

<h3 id="curl-multi-strerror"><a href="#curl-multi-strerror" class="headerlink" title="curl_multi_strerror()"></a>curl_multi_strerror()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回描述错误码的字符串文本。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string curl_multi_strerror ( int $errornum )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建 cURL 句柄</span><br><span class="line">$ch1 &#x3D; curl_init(&quot;https:&#x2F;&#x2F;www.runoob.com&#x2F;&quot;);</span><br><span class="line">$ch2 &#x3D; curl_init(&quot;http:&#x2F;&#x2F;php.net&#x2F;&quot;);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 创建一个批处理cURL句柄</span><br><span class="line">$mh &#x3D; curl_multi_init();</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 添加句柄到批处理句柄</span><br><span class="line">curl_multi_add_handle($mh, $ch1);</span><br><span class="line">curl_multi_add_handle($mh, $ch2);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 执行批处理句柄</span><br><span class="line">do &#123;</span><br><span class="line">    $status &#x3D; curl_multi_exec($mh, $active);</span><br><span class="line">    &#x2F;&#x2F; 检查错误</span><br><span class="line">    if($status &gt; 0) &#123;</span><br><span class="line">        &#x2F;&#x2F; 显示错误信息</span><br><span class="line">        echo &quot;ERROR!\n &quot; . curl_multi_strerror($status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; while ($status &#x3D;&#x3D;&#x3D; CURLM_CALL_MULTI_PERFORM || $active);</span><br></pre></td></tr></table></figure>

<h3 id="curl-pause"><a href="#curl-pause" class="headerlink" title="curl_pause()"></a>curl_pause()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">暂停及恢复连接。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int curl_pause ( resource $ch , int $bitmask )</span><br><span class="line">ch         由 curl_init() 返回的 cURL 句柄。</span><br><span class="line">bitmask    CURLPAUSE_*中的一个常量。</span><br></pre></td></tr></table></figure>

<h3 id="curl-reset"><a href="#curl-reset" class="headerlink" title="curl_reset()"></a>curl_reset()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重置libcurl会话句柄的所有选项。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void curl_reset ( resource $ch )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个cURL句柄</span><br><span class="line">$ch &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置 CURLOPT_USERAGENT 选项</span><br><span class="line">curl_setopt($ch, CURLOPT_USERAGENT, &quot;My test user-agent&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 重置所有先前设置的选项</span><br><span class="line">curl_reset($ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 发送 HTTP 请求</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, &#39;http:&#x2F;&#x2F;w3cschool.cc&#x2F;&#39;);</span><br><span class="line">curl_exec($ch); &#x2F;&#x2F; the previously set user-agent will be not sent, it has been reset by curl_reset</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭句柄</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>

<h3 id="curl-setopt-array"><a href="#curl-setopt-array" class="headerlink" title="curl_setopt_array()"></a>curl_setopt_array()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为 cURL 传输会话批量设置选项。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool curl_setopt_array ( resource $ch , array $options )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个新cURL资源</span><br><span class="line">$ch &#x3D; curl_init();</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">$options &#x3D; array(CURLOPT_URL &#x3D;&gt; &#39;https:&#x2F;&#x2F;www.runoob.com&#39;,</span><br><span class="line">                 CURLOPT_HEADER &#x3D;&gt; false</span><br><span class="line">                );</span><br><span class="line"> </span><br><span class="line">curl_setopt_array($ch, $options);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 抓取URL并把它传递给浏览器</span><br><span class="line">curl_exec($ch);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 关闭 cURL 资源，并且释放系统资源</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>


<h3 id="curl-setopt"><a href="#curl-setopt" class="headerlink" title="curl_setopt()"></a>curl_setopt()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置一个cURL传输选项。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool curl_setopt ( resource $ch , int $option , mixed $value )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个新cURL资源</span><br><span class="line">$ch &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.example.com&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, false);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 抓取URL并把它传递给浏览器</span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;关闭cURL资源，并且释放系统资源</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>

<h3 id="curl-share-close"><a href="#curl-share-close" class="headerlink" title="curl_share_close()"></a>curl_share_close()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关闭 cURL 共享句柄并释放所有资源。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void curl_share_close ( resource $sh )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建cURL共享句柄并设置cookie数据</span><br><span class="line">$sh &#x3D; curl_share_init();</span><br><span class="line">curl_share_setopt($sh, CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化第一个cURL句柄并指定它为共享句柄</span><br><span class="line">$ch1 &#x3D; curl_init(&quot;http:&#x2F;&#x2F;www.w3cschool.cc&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch1, CURLOPT_SHARE, $sh);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行第一个cURL句柄</span><br><span class="line">curl_exec($ch1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化第二个cURL句柄并指定它为共享句柄</span><br><span class="line">$ch2 &#x3D; curl_init(&quot;http:&#x2F;&#x2F;php.net&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch2, CURLOPT_SHARE, $sh);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行第二个cURL句柄</span><br><span class="line">&#x2F;&#x2F;  所有 $ch1 句柄的数据在 $ch2 句柄中共享</span><br><span class="line">curl_exec($ch2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭cURL共享句柄</span><br><span class="line">curl_share_close($sh);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭cURL句柄</span><br><span class="line">curl_close($ch1);</span><br><span class="line">curl_close($ch2)</span><br></pre></td></tr></table></figure>

<h3 id="curl-share-init"><a href="#curl-share-init" class="headerlink" title="curl_share_init()"></a>curl_share_init()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化一个 cURL 共享句柄</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource curl_share_init ( void )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建cURL共享句柄并设置cookie数据</span><br><span class="line">$sh &#x3D; curl_share_init();</span><br><span class="line">curl_share_setopt($sh, CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化第一个cURL句柄并指定它为共享句柄</span><br><span class="line">$ch1 &#x3D; curl_init(&quot;http:&#x2F;&#x2F;www.w3cschool.cc&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch1, CURLOPT_SHARE, $sh);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行第一个cURL句柄</span><br><span class="line">curl_exec($ch1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化第二个cURL句柄并指定它为共享句柄</span><br><span class="line">$ch2 &#x3D; curl_init(&quot;http:&#x2F;&#x2F;php.net&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch2, CURLOPT_SHARE, $sh);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行第二个cURL句柄</span><br><span class="line">&#x2F;&#x2F;  所有 $ch1 句柄的数据在 $ch2 句柄中共享</span><br><span class="line">curl_exec($ch2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭cURL共享句柄</span><br><span class="line">curl_share_close($sh);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭cURL句柄W</span><br><span class="line">curl_close($ch1);</span><br><span class="line">curl_close($ch2)</span><br></pre></td></tr></table></figure>

<h3 id="curl-share-setopt"><a href="#curl-share-setopt" class="headerlink" title="curl_share_setopt()"></a>curl_share_setopt()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置 cURL 共享句柄的一个选项</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool curl_share_setopt ( resource $sh , int $option , string $value )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建cURL共享句柄并设置cookie数据</span><br><span class="line">$sh &#x3D; curl_share_init();</span><br><span class="line">curl_share_setopt($sh, CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化第一个cURL句柄并指定它为共享句柄</span><br><span class="line">$ch1 &#x3D; curl_init(&quot;http:&#x2F;&#x2F;www.w3cschool.cc&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch1, CURLOPT_SHARE, $sh);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行第一个cURL句柄</span><br><span class="line">curl_exec($ch1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化第二个cURL句柄并指定它为共享句柄</span><br><span class="line">$ch2 &#x3D; curl_init(&quot;http:&#x2F;&#x2F;php.net&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch2, CURLOPT_SHARE, $sh);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行第二个cURL句柄</span><br><span class="line">&#x2F;&#x2F;  所有 $ch1 句柄的数据在 $ch2 句柄中共享</span><br><span class="line">curl_exec($ch2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭cURL共享句柄</span><br><span class="line">curl_share_close($sh);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭cURL句柄W</span><br><span class="line">curl_close($ch1);</span><br><span class="line">curl_close($ch2)</span><br></pre></td></tr></table></figure>

<h3 id="curl-strerror"><a href="#curl-strerror" class="headerlink" title="curl_strerror()"></a>curl_strerror()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回错误码的描述</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl_strerror ( int $errornum )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个拼写错误的URL的cURL句柄</span><br><span class="line">$ch &#x3D; curl_init(&quot;htp:&#x2F;&#x2F;example.com&#x2F;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 发送请求</span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 检查错误代码并显示错误信息</span><br><span class="line">if($errno &#x3D; curl_errno($ch)) &#123;</span><br><span class="line">    $error_message &#x3D; curl_strerror($errno);</span><br><span class="line">    echo &quot;cURL error (&#123;$errno&#125;):\n &#123;$error_message&#125;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭句柄</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cURL error (1):</span><br><span class="line"> Unsupported protocol</span><br></pre></td></tr></table></figure>

<h3 id="curl-unescape"><a href="#curl-unescape" class="headerlink" title="curl_unescape()"></a>curl_unescape()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解码经过URL编码的字符串。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string curl_unescape ( resource $ch , string $str )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个curl句柄</span><br><span class="line">$ch &#x3D; curl_init(&#39;http:&#x2F;&#x2F;example.com&#x2F;redirect.php&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 发送 HTTP 请求</span><br><span class="line">curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获得最后一个有效的URL</span><br><span class="line">$effective_url &#x3D; curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);</span><br><span class="line">&#x2F;&#x2F; ie. &quot;http:&#x2F;&#x2F;example.com&#x2F;show_location.php?loc&#x3D;M%C3%BCnchen&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 解码URL</span><br><span class="line">$effective_url_decoded &#x3D; curl_unescape($ch, $effective_url);</span><br><span class="line">&#x2F;&#x2F; &quot;http:&#x2F;&#x2F;example.com&#x2F;show_location.php?loc&#x3D;München&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭句柄</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>


<h3 id="curl-version"><a href="#curl-version" class="headerlink" title="curl_version()"></a>curl_version()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取cURL版本信息。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array curl_version ([ int $age &#x3D; CURLVERSION_NOW ] )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取cURL版本数组</span><br><span class="line">$version &#x3D; curl_version();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在cURL编译版本中使用位域来检查某些特性</span><br><span class="line">$bitfields &#x3D; Array(</span><br><span class="line">            &#39;CURL_VERSION_IPV6&#39;, </span><br><span class="line">            &#39;CURL_VERSION_KERBEROS4&#39;, </span><br><span class="line">            &#39;CURL_VERSION_SSL&#39;, </span><br><span class="line">            &#39;CURL_VERSION_LIBZ&#39;</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foreach($bitfields as $feature)</span><br><span class="line">&#123;</span><br><span class="line">    echo $feature . ($version[&#39;features&#39;] &amp; constant($feature) ? &#39; matches&#39; : &#39; does not match&#39;);</span><br><span class="line">    echo PHP_EOL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><blockquote>
<p> <a href="https://www.runoob.com/php/php-ref-curl.html" target="_blank" rel="noopener">《PHP 5 Array 函数 | 菜鸟教程》</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 第六周函数学习记录</title>
    <url>/2020/07/12/PHP%E7%AC%AC%E5%85%AD%E5%91%A8%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="timezone-identifiers-list"><a href="#timezone-identifiers-list" class="headerlink" title="timezone_identifiers_list()"></a>timezone_identifiers_list()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回带有所有时区标识符的数值数组。</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timezone_identifiers_list(what,country);</span><br><span class="line"></span><br><span class="line">what	可选。规定一个 DateTimeZone 类常量</span><br><span class="line">        1 &#x3D; AFRICA</span><br><span class="line">        2 &#x3D; AMERICA</span><br><span class="line">        4 &#x3D; ANTARCTICA</span><br><span class="line">        8 &#x3D; ARCTIC</span><br><span class="line">        16 &#x3D; ASIA</span><br><span class="line">        32 &#x3D; ATLANTIC</span><br><span class="line">        64 &#x3D; AUSTRALIA</span><br><span class="line">        128 &#x3D; EUROPE</span><br><span class="line">        256 &#x3D; INDIAN</span><br><span class="line">        512 &#x3D; PACIFIC</span><br><span class="line">        1024 &#x3D; UTC</span><br><span class="line">        2047 &#x3D; ALL</span><br><span class="line">        4095 &#x3D; ALL_WITH_BC</span><br><span class="line">        4096 &#x3D; PER_COUNTRY</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print_r(timezone_identifiers_list(1));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Africa&#x2F;Abidjan</span><br><span class="line">    [1] &#x3D;&gt; Africa&#x2F;Accra</span><br><span class="line">    [2] &#x3D;&gt; Africa&#x2F;Addis_Ababa</span><br><span class="line">    [3] &#x3D;&gt; Africa&#x2F;Algiers</span><br><span class="line">    [4] &#x3D;&gt; Africa&#x2F;Asmara</span><br><span class="line">    [5] &#x3D;&gt; Africa&#x2F;Bamako</span><br><span class="line">    [6] &#x3D;&gt; Africa&#x2F;Bangui</span><br><span class="line">    [7] &#x3D;&gt; Africa&#x2F;Banjul</span><br><span class="line">    [8] &#x3D;&gt; Africa&#x2F;Bissau</span><br><span class="line">    [9] &#x3D;&gt; Africa&#x2F;Blantyre</span><br><span class="line">    [10] &#x3D;&gt; Africa&#x2F;Brazzaville</span><br><span class="line">    [11] &#x3D;&gt; Africa&#x2F;Bujumbura</span><br><span class="line">    [12] &#x3D;&gt; Africa&#x2F;Cairo</span><br><span class="line">    [13] &#x3D;&gt; Africa&#x2F;Casablanca</span><br><span class="line">    [14] &#x3D;&gt; Africa&#x2F;Ceuta</span><br><span class="line">    [15] &#x3D;&gt; Africa&#x2F;Conakry</span><br><span class="line">    [16] &#x3D;&gt; Africa&#x2F;Dakar</span><br><span class="line">    [17] &#x3D;&gt; Africa&#x2F;Dar_es_Salaam</span><br><span class="line">    [18] &#x3D;&gt; Africa&#x2F;Djibouti</span><br><span class="line">    [19] &#x3D;&gt; Africa&#x2F;Douala</span><br><span class="line">    [20] &#x3D;&gt; Africa&#x2F;El_Aaiun</span><br><span class="line">    [21] &#x3D;&gt; Africa&#x2F;Freetown</span><br><span class="line">    [22] &#x3D;&gt; Africa&#x2F;Gaborone</span><br><span class="line">    [23] &#x3D;&gt; Africa&#x2F;Harare</span><br><span class="line">    [24] &#x3D;&gt; Africa&#x2F;Johannesburg</span><br><span class="line">    [25] &#x3D;&gt; Africa&#x2F;Juba</span><br><span class="line">    [26] &#x3D;&gt; Africa&#x2F;Kampala</span><br><span class="line">    [27] &#x3D;&gt; Africa&#x2F;Khartoum</span><br><span class="line">    [28] &#x3D;&gt; Africa&#x2F;Kigali</span><br><span class="line">    [29] &#x3D;&gt; Africa&#x2F;Kinshasa</span><br><span class="line">    [30] &#x3D;&gt; Africa&#x2F;Lagos</span><br><span class="line">    [31] &#x3D;&gt; Africa&#x2F;Libreville</span><br><span class="line">    [32] &#x3D;&gt; Africa&#x2F;Lome</span><br><span class="line">    [33] &#x3D;&gt; Africa&#x2F;Luanda</span><br><span class="line">    [34] &#x3D;&gt; Africa&#x2F;Lubumbashi</span><br><span class="line">    [35] &#x3D;&gt; Africa&#x2F;Lusaka</span><br><span class="line">    [36] &#x3D;&gt; Africa&#x2F;Malabo</span><br><span class="line">    [37] &#x3D;&gt; Africa&#x2F;Maputo</span><br><span class="line">    [38] &#x3D;&gt; Africa&#x2F;Maseru</span><br><span class="line">    [39] &#x3D;&gt; Africa&#x2F;Mbabane</span><br><span class="line">    [40] &#x3D;&gt; Africa&#x2F;Mogadishu</span><br><span class="line">    [41] &#x3D;&gt; Africa&#x2F;Monrovia</span><br><span class="line">    [42] &#x3D;&gt; Africa&#x2F;Nairobi</span><br><span class="line">    [43] &#x3D;&gt; Africa&#x2F;Ndjamena</span><br><span class="line">    [44] &#x3D;&gt; Africa&#x2F;Niamey</span><br><span class="line">    [45] &#x3D;&gt; Africa&#x2F;Nouakchott</span><br><span class="line">    [46] &#x3D;&gt; Africa&#x2F;Ouagadougou</span><br><span class="line">    [47] &#x3D;&gt; Africa&#x2F;Porto-Novo</span><br><span class="line">    [48] &#x3D;&gt; Africa&#x2F;Sao_Tome</span><br><span class="line">    [49] &#x3D;&gt; Africa&#x2F;Tripoli</span><br><span class="line">    [50] &#x3D;&gt; Africa&#x2F;Tunis</span><br><span class="line">    [51] &#x3D;&gt; Africa&#x2F;Windhoek</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="timezone-location-get"><a href="#timezone-location-get" class="headerlink" title="timezone_location_get()"></a>timezone_location_get()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回指定时区的位置信息</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timezone_location_get(object);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tz&#x3D;timezone_open(&quot;Asia&#x2F;Taipei&quot;);</span><br><span class="line">print_r(timezone_location_get($tz));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [country_code] &#x3D;&gt; TW </span><br><span class="line">    [latitude] &#x3D;&gt; 25.05</span><br><span class="line">    [longitude] &#x3D;&gt; 121.5 </span><br><span class="line">    [comments] &#x3D;&gt; </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="timezone-name-from-abbr"><a href="#timezone-name-from-abbr" class="headerlink" title="timezone_name_from_abbr()"></a>timezone_name_from_abbr()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据时区缩略语返回时区名称</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timezone_name_from_abbr(abbr,gmtoffset,isdst);</span><br><span class="line">abbr	必需。规定时区缩略语。</span><br><span class="line">gmtoffset	可选。规定相对于 GMT 的以秒为单位的偏移量。默认为 -1，表示返回第一个被找到的匹配缩略语的时区。否则搜索精确的偏移量。如果没有找到，则返回任意偏移量的第一个时区。</span><br><span class="line">isdst	可选。规定夏令时指示器。</span><br><span class="line">        -1 &#x3D; 默认。搜索时是否考虑时区的夏令时</span><br><span class="line">         1 &#x3D; 表示 gmtoffset 是受夏令时影响的一个偏移量</span><br><span class="line">         0 &#x3D; 表示 gmtoffset 是不受夏令时影响的一个偏移量</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo timezone_name_from_abbr(&quot;EST&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo timezone_name_from_abbr(&quot;&quot;,7200,0);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">America&#x2F;New_York</span><br><span class="line">Europe&#x2F;Helsinki</span><br></pre></td></tr></table></figure>

<h3 id="timezone-name-get"><a href="#timezone-name-get" class="headerlink" title="timezone_name_get()"></a>timezone_name_get()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回时区的名称</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timezone_name_get(object);</span><br><span class="line">object	必需。规定一个 DateTimeZone 对象。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tz&#x3D;timezone_open(&quot;Europe&#x2F;Paris&quot;);</span><br><span class="line">echo timezone_name_get($tz);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Europe&#x2F;Paris</span><br></pre></td></tr></table></figure>

<h3 id="timezone-offset-get"><a href="#timezone-offset-get" class="headerlink" title="timezone_offset_get()"></a>timezone_offset_get()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回相对于 GMT 的时区偏移</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timezone_offset_get(object,datetime);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tz&#x3D;timezone_open(&quot;Asia&#x2F;Taipei&quot;);</span><br><span class="line">$dateTimeOslo&#x3D;date_create(&quot;now&quot;,timezone_open(&quot;Europe&#x2F;Oslo&quot;));</span><br><span class="line">echo timezone_offset_get($tz,$dateTimeOslo);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">28800</span><br></pre></td></tr></table></figure>

<h3 id="timezone-open"><a href="#timezone-open" class="headerlink" title="timezone_open()"></a>timezone_open()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建一个新的 DateTimeZone 对象</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timezone_open(timezone);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tz&#x3D;timezone_open(&quot;Europe&#x2F;Paris&quot;);</span><br><span class="line">echo timezone_name_get($tz);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Europe&#x2F;Paris</span><br></pre></td></tr></table></figure>

<h3 id="timezone-version-get"><a href="#timezone-version-get" class="headerlink" title="timezone_version_get()"></a>timezone_version_get()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回时区数据库的版本。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timezone_open(timezone);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo timezone_version_get();</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2012.2</span><br></pre></td></tr></table></figure>

<h3 id="chdir"><a href="#chdir" class="headerlink" title="chdir()"></a>chdir()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数改变当前的目录。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chdir(directory);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Get current directory</span><br><span class="line">echo getcwd() . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Change directory</span><br><span class="line">chdir(&quot;images&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Get current directory</span><br><span class="line">echo getcwd();</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;php</span><br><span class="line">&#x2F;home&#x2F;php&#x2F;images</span><br></pre></td></tr></table></figure>

<h3 id="chroot"><a href="#chroot" class="headerlink" title="chroot()"></a>chroot()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 函数改变当前进程的根目录为 directory，并把当前工作目录改为 &quot;&#x2F;&quot;。</span><br><span class="line"></span><br><span class="line">注意：该函数需要 root 权限，且仅在 GNU 和 BSD 系统上仅当使用 CLI、CGI、嵌入式 SAPI 时可用。该函数没有在 Windows 平台上实现。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chroot(directory);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Change root directory</span><br><span class="line">chroot(&quot;&#x2F;path&#x2F;to&#x2F;chroot&#x2F;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Get current directory</span><br><span class="line">echo getcwd();</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="closedir"><a href="#closedir" class="headerlink" title="closedir()"></a>closedir()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数关闭目录句柄</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">closedir(dir_handle);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$dir &#x3D; &quot;&#x2F;images&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Open a directory, and read its contents</span><br><span class="line">if (is_dir($dir))&#123;</span><br><span class="line">    if ($dh &#x3D; opendir($dir))&#123;</span><br><span class="line">        while (($file &#x3D; readdir($dh)) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">            echo &quot;filename:&quot; . $file . &quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        closedir($dh);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename: cat.gif</span><br><span class="line">filename: dog.gif</span><br><span class="line">filename: horse.gif</span><br></pre></td></tr></table></figure>

<h3 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir() 函数返回 Directory 类的实例。该函数用于读取一个目录，包含如下：</span><br><span class="line">    给定的要打开的目录</span><br><span class="line">    dir() 的 handle 和 path 两个属性是可用的</span><br><span class="line">    handle 和 path 属性有三个方法：read()、rewind() 和 close()</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir(directory,context);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$d &#x3D; dir(getcwd());</span><br><span class="line"></span><br><span class="line">echo &quot;Handle: &quot; . $d-&gt;handle . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;Path: &quot; . $d-&gt;path . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">while (($file &#x3D; $d-&gt;read()) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">echo &quot;filename: &quot; . $file . &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$d-&gt;close();</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Handle: Resource id #2</span><br><span class="line">Path: &#x2F;etc&#x2F;php</span><br><span class="line">filename: .</span><br><span class="line">filename: ..</span><br><span class="line">filename: ajax.gif</span><br><span class="line">filename: books.xml</span><br><span class="line">filename: cdcatalog.xml</span><br><span class="line">filename: cd_catalog.xml</span><br><span class="line">filename: default.html</span><br><span class="line">filename: demo_array.html</span><br><span class="line">filename: demo_array.htm</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="getcwd"><a href="#getcwd" class="headerlink" title="getcwd()"></a>getcwd()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回当前工作目录。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getcwd();</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo getcwd()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;php</span><br></pre></td></tr></table></figure>

<h3 id="opendir"><a href="#opendir" class="headerlink" title="opendir()"></a>opendir()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数打开目录句柄。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opendir(path,context);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$dir &#x3D; &quot;&#x2F;images&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Open a directory, and read its contents</span><br><span class="line">if (is_dir($dir))&#123;</span><br><span class="line">    if ($dh &#x3D; opendir($dir))&#123;</span><br><span class="line">        while (($file &#x3D; readdir($dh)) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">            echo &quot;filename:&quot; . $file . &quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        closedir($dh);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename: cat.gif</span><br><span class="line">filename: dog.gif</span><br><span class="line">filename: horse.gif</span><br></pre></td></tr></table></figure>

<h3 id="readdir"><a href="#readdir" class="headerlink" title="readdir()"></a>readdir()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回目录中下一个文件的文件名。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">readdir(dir_handle);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$dir &#x3D; &quot;&#x2F;images&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Open a directory, and read its contents</span><br><span class="line">if (is_dir($dir))&#123;</span><br><span class="line">    if ($dh &#x3D; opendir($dir))&#123;</span><br><span class="line">        while (($file &#x3D; readdir($dh)) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">            echo &quot;filename:&quot; . $file . &quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        closedir($dh);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename: cat.gif</span><br><span class="line">filename: dog.gif</span><br><span class="line">filename: horse.gif</span><br></pre></td></tr></table></figure>

<h3 id="rewinddir"><a href="#rewinddir" class="headerlink" title="rewinddir()"></a>rewinddir()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数重置由 opendir() 创建的目录句柄。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rewinddir(dir_handle);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$dir &#x3D; &quot;&#x2F;images&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Open a directory, and read its contents</span><br><span class="line">if (is_dir($dir))&#123;</span><br><span class="line">    if ($dh &#x3D; opendir($dir))&#123;</span><br><span class="line">        &#x2F;&#x2F; List files in images directory</span><br><span class="line">        while (($file &#x3D; readdir($dh)) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">            echo &quot;filename:&quot; . $file . &quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        rewinddir();</span><br><span class="line">        &#x2F;&#x2F; List once again files in images directory</span><br><span class="line">        while (($file &#x3D; readdir($dh)) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">            echo &quot;filename:&quot; . $file . &quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        closedir($dh);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename: cat.gif</span><br><span class="line">filename: dog.gif</span><br><span class="line">filename: horse.gif</span><br><span class="line">filename: cat.gif</span><br><span class="line">filename: dog.gif</span><br><span class="line">filename: horse.gif</span><br></pre></td></tr></table></figure>

<h3 id="scandir"><a href="#scandir" class="headerlink" title="scandir()"></a>scandir()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回指定目录中的文件和目录的数组。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scandir(directory,sorting_order,context);</span><br><span class="line">directory	    必需。规定要扫描的目录。</span><br><span class="line">sorting_order	可选。规定排列顺序。默认是 0，表示按字母升序排列。如果设置为 SCANDIR_SORT_DESCENDING 或者 1，则表示按字母降序排列。如果设置为 SCANDIR_SORT_NONE，则返回未排列的结果。</span><br><span class="line">context	        可选。规定目录句柄的环境。context 是可修改目录流的行为的一套选项。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$dir &#x3D; &quot;&#x2F;images&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Sort in ascending order - this is default</span><br><span class="line">$a &#x3D; scandir($dir);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Sort in descending order</span><br><span class="line">$b &#x3D; scandir($dir,1);</span><br><span class="line"></span><br><span class="line">print_r($a);</span><br><span class="line">print_r($b);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">[0] &#x3D;&gt; .</span><br><span class="line">[1] &#x3D;&gt; ..</span><br><span class="line">[2] &#x3D;&gt; cat.gif</span><br><span class="line">[3] &#x3D;&gt; dog.gif</span><br><span class="line">[4] &#x3D;&gt; horse.gif</span><br><span class="line">[5] &#x3D;&gt; myimages</span><br><span class="line">)</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">[0] &#x3D;&gt; myimages</span><br><span class="line">[1] &#x3D;&gt; horse.gif</span><br><span class="line">[2] &#x3D;&gt; dog.gif</span><br><span class="line">[3] &#x3D;&gt; cat.gif</span><br><span class="line">[4] &#x3D;&gt; ..</span><br><span class="line">[5] &#x3D;&gt; .</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="debug-backtrace"><a href="#debug-backtrace" class="headerlink" title="debug_backtrace()"></a>debug_backtrace()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debug_backtrace() 函数生成 backtrace。</span><br><span class="line">该函数显示由 debug_backtrace() 函数代码生成的数据。</span><br></pre></td></tr></table></figure>


<p>返回一个关联数组。下面是可能返回的元素：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>function</td>
<td>string</td>
<td>当前的函数名。</td>
</tr>
<tr>
<td>line</td>
<td>integer</td>
<td>当前的行号。</td>
</tr>
<tr>
<td>file</td>
<td>string</td>
<td>当前的文件名。</td>
</tr>
<tr>
<td>class</td>
<td>string</td>
<td>当前的类名。</td>
</tr>
<tr>
<td>object</td>
<td>object</td>
<td>当前对象。</td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>当前的调用类型，可能的调用：<br>返回：”-&gt;” - 方法调用<br>返回：”::” - 静态方法调用<br>返回 nothing - 函数调用</td>
</tr>
<tr>
<td>args</td>
<td>array</td>
<td>如果在函数中，列出函数参数。如果在被引用的文件中，列出被引用的文件名</td>
</tr>
</tbody></table>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debug_backtrace()</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function one($str1, $str2)</span><br><span class="line">&#123;</span><br><span class="line">    two(&quot;Glenn&quot;, &quot;Quagmire&quot;);</span><br><span class="line">&#125;</span><br><span class="line">function two($str1, $str2)</span><br><span class="line">&#123;</span><br><span class="line">    three(&quot;Cleveland&quot;, &quot;Brown&quot;);</span><br><span class="line">&#125;</span><br><span class="line">function three($str1, $str2)</span><br><span class="line">&#123;</span><br><span class="line">    print_r(debug_backtrace());</span><br><span class="line">&#125;</span><br><span class="line">one(&quot;Peter&quot;, &quot;Griffin&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Array</span><br><span class="line">    (</span><br><span class="line">        [file] &#x3D;&gt; C:webfoldertest.php</span><br><span class="line">        [line] &#x3D;&gt; 7</span><br><span class="line">        [function] &#x3D;&gt; three</span><br><span class="line">        [args] &#x3D;&gt; Array</span><br><span class="line">                (</span><br><span class="line">                [0] &#x3D;&gt; Cleveland</span><br><span class="line">                [1] &#x3D;&gt; Brown</span><br><span class="line">                )</span><br><span class="line">    )</span><br><span class="line">    [1] &#x3D;&gt; Array</span><br><span class="line">    (</span><br><span class="line">        [file] &#x3D;&gt; C:webfoldertest.php</span><br><span class="line">        [line] &#x3D;&gt; 3</span><br><span class="line">        [function] &#x3D;&gt; two</span><br><span class="line">        [args] &#x3D;&gt; Array</span><br><span class="line">                (</span><br><span class="line">                [0] &#x3D;&gt; Glenn</span><br><span class="line">                [1] &#x3D;&gt; Quagmire</span><br><span class="line">                )</span><br><span class="line">    )</span><br><span class="line">    [2] &#x3D;&gt; Array</span><br><span class="line">    (</span><br><span class="line">        [file] &#x3D;&gt; C:webfoldertest.php</span><br><span class="line">        [line] &#x3D;&gt; 14</span><br><span class="line">        [function] &#x3D;&gt; one</span><br><span class="line">        [args] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [0] &#x3D;&gt; Peter</span><br><span class="line">            [1] &#x3D;&gt; Griffin</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="debug-print-backtrace"><a href="#debug-print-backtrace" class="headerlink" title="debug_print_backtrace()"></a>debug_print_backtrace()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debug_print_backtrace() 函数打印 backtrace。</span><br><span class="line">该函数显示由 debug_print_backtrace() 函数代码生成的数据。</span><br></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debug_print_backtrace()</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function one($str1, $str2)</span><br><span class="line">&#123;</span><br><span class="line">    two(&quot;Glenn&quot;, &quot;Quagmire&quot;);</span><br><span class="line">&#125;</span><br><span class="line">function two($str1, $str2)</span><br><span class="line">&#123;</span><br><span class="line">    three(&quot;Cleveland&quot;, &quot;Brown&quot;);</span><br><span class="line">&#125;</span><br><span class="line">function three($str1, $str2)</span><br><span class="line">&#123;</span><br><span class="line">    debug_print_backtrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">one(&quot;Peter&quot;, &quot;Griffin&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#0 three(Cleveland, Brown) called at [C:webfoldertest.php:8]</span><br><span class="line">#1 two(Glenn, Quagmire) called at [C:webfoldertest.php:4]</span><br><span class="line">#2 one(Peter, Griffin) called at [C:webfoldertest.php:15]</span><br></pre></td></tr></table></figure>

<h3 id="error-get-last"><a href="#error-get-last" class="headerlink" title="error_get_last()"></a>error_get_last()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error_get_last() 函数获得最后发生的错误。</span><br><span class="line">该函数以数组的形式返回最后发生的错误。如果没有错误发生则返回 NULL。</span><br></pre></td></tr></table></figure>
<p>返回的错误数组包含 4 个键名和键值：</p>
<ul>
<li>[type] - 错误类型</li>
<li>[message] - 错误消息</li>
<li>[file] - 发生错误所在的文件</li>
<li>[line] - 发生错误所在的行</li>
</ul>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debug_print_backtrace()</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo $test;</span><br><span class="line">    print_r(error_get_last());</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [type] &#x3D;&gt; 8</span><br><span class="line">    [message] &#x3D;&gt; Undefined variable: test</span><br><span class="line">    [file] &#x3D;&gt; C:webfoldertest.php</span><br><span class="line">    [line] &#x3D;&gt; 2</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="error-log"><a href="#error-log" class="headerlink" title="error_log()"></a>error_log()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error_log() 函数向服务器错误记录、文件或远程目标发送一个错误。</span><br><span class="line">如果成功该函数返回 TRUE，如果失败该函数返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>返回的错误数组包含 4 个键名和键值：</p>
<ul>
<li>[type] - 错误类型</li>
<li>[message] - 错误消息</li>
<li>[file] - 发生错误所在的文件</li>
<li>[line] - 发生错误所在的行</li>
</ul>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error_log(error,type,destination,headers)</span><br></pre></td></tr></table></figure>
<table>
    <tr><th>参数</th><th>描述</th></tr>
    <tr><td>error</td><td>必需。要记录的错误消息。</td></tr>
    <tr><td>type</td><td>    可选。规定错误记录的类型。<br>
                            可能的记录类型：<br>
                            <ul>
                                <li>0 - 默认。根据在 php.ini 文件中的 error_log 配置，错误被发送到服务器日志系统或文件。</li>
                                <li>1 - 错误被发送到 destination 参数中的地址。只有该类型使用 headers 参数。</li>
                                <li>2 - 通过 PHP debugging 连接来发送错误。该选项只在 PHP 3 中可用。</li>
                                <li>3 - 错误发送到文件目标字符串。</li>
                            </ul>
                  </td>
    </tr>
    <tr><td>destination</td><td>可选。规定向何处发送错误消息。该参数的值依赖于 "type" 参数的值。</td></tr>
    <tr><td>headers</td><td>可选。只在 "type" 参数为 1 时使用。规定附加的头部，比如 From, Cc 以及 Bcc。附加头部由 CRLF (\r\n) 分隔。
注意：在发送电子邮件时，必须包含 From 头部。可以在 php.ini 文件中或者通过此参数设置。</td></tr>
</table>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 下面的实例发送一封带有自定义错误的电子邮件：</span><br><span class="line">$test&#x3D;2;</span><br><span class="line"></span><br><span class="line">if ($test&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">    error_log(&quot;A custom error has been triggered&quot;,1,&quot;someone@example.com&quot;,&quot;From: webmaster@example.com&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 上面代码接收到的邮件如下所示：</span><br><span class="line">A custom error has been triggered</span><br></pre></td></tr></table></figure>

<h3 id="error-reporting"><a href="#error-reporting" class="headerlink" title="error_reporting()"></a>error_reporting()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error_reporting() 函数规定报告哪个错误。</span><br><span class="line">该函数设置当前脚本的错误报告级别。</span><br><span class="line">该函数返回旧的错误报告级别。</span><br></pre></td></tr></table></figure>


<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error_reporting(report_level)</span><br></pre></td></tr></table></figure>
<p>report_level</p>
<table>
<thead>
<tr>
<th>值</th>
<th>常量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>E_ERROR</td>
<td>运行时致命的错误。不能修复的错误。停止执行脚本。</td>
</tr>
<tr>
<td>2</td>
<td>E_WARNING</td>
<td>运行时非致命的错误。没有停止执行脚本。</td>
</tr>
<tr>
<td>4</td>
<td>E_PARSE</td>
<td>编译时的解析错误。解析错误应该只由解析器生成。</td>
</tr>
<tr>
<td>8</td>
<td>E_NOTICE</td>
<td>运行时的通知。脚本发现可能是一个错误，但也可能在正常运行脚本时发生。</td>
</tr>
<tr>
<td>16</td>
<td>E_CORE_ERROR</td>
<td>PHP 启动时的致命错误。这就如同 PHP 核心的 E_ERROR。</td>
</tr>
<tr>
<td>32</td>
<td>E_CORE_WARNING    PHP</td>
<td>启动时的非致命错误。这就如同 PHP 核心的 E_WARNING。</td>
</tr>
<tr>
<td>64</td>
<td>E_COMPILE_ERROR</td>
<td>编译时致命的错误。这就如同由 Zend 脚本引擎生成的 E_ERROR。</td>
</tr>
<tr>
<td>128</td>
<td>E_COMPILE_WARNING</td>
<td>编译时非致命的错误。这就如同由 Zend 脚本引擎生成的 E_WARNING。</td>
</tr>
<tr>
<td>256</td>
<td>E_USER_ERROR</td>
<td>用户生成的致命错误。这就如同由程序员使用 PHP 函数 trigger_error() 生成的 E_ERROR。</td>
</tr>
<tr>
<td>512</td>
<td>E_USER_WARNING</td>
<td>用户生成的非致命错误。这就如同由程序员使用 PHP 函数 trigger_error() 生成的 E_WARNING。</td>
</tr>
<tr>
<td>1024</td>
<td>E_USER_NOTICE</td>
<td>用户生成的通知。这就如同由程序员使用 PHP 函数 trigger_error() 生成的 E_NOTICE。</td>
</tr>
<tr>
<td>2048</td>
<td>E_STRICT</td>
<td>运行时的通知。PHP 建议您改变代码，以提高代码的互用性和兼容性。</td>
</tr>
<tr>
<td>4096</td>
<td>E_RECOVERABLE_ERROR</td>
<td>可捕获的致命错误。这就如同一个可以由用户定义的句柄捕获的 E_ERROR（见 set_error_handler()）。</td>
</tr>
<tr>
<td>8191</td>
<td>E_ALL</td>
<td>所有的错误和警告的级别，除了 E_STRICT（自 PHP 6.0 起，E_STRICT 将作为 E_ALL的一部分）。</td>
</tr>
</tbody></table>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Disable error reporting</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Report runtime errors</span><br><span class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Report all errors</span><br><span class="line">error_reporting(E_ALL);</span><br></pre></td></tr></table></figure>

<h3 id="restore-error-handler"><a href="#restore-error-handler" class="headerlink" title="restore_error_handler()"></a>restore_error_handler()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">restore_error_handler() 函数恢复之前的错误处理程序。</span><br><span class="line">该函数用于在通过 set_error_handler() 函数改变后恢复之前的错误处理程序。</span><br><span class="line">该函数总是返回 TRUE。</span><br></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">restore_error_handler()</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;custom error handler function</span><br><span class="line">function customError($errno, $errstr, $errfile, $errline)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;b&gt;Custom error:&lt;&#x2F;b&gt; [$errno] $errstr&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">    echo &quot; Error on line $errline in $errfile&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;set user-defined error handler</span><br><span class="line">set_error_handler(&quot;customError&quot;);</span><br><span class="line"></span><br><span class="line">$test&#x3D;2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;trigger error</span><br><span class="line">if ($test&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">    trigger_error(&quot;A custom error has been triggered&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;restore built-in error handler</span><br><span class="line">restore_error_handler();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;trigger error again</span><br><span class="line">if ($test&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">    trigger_error(&quot;A custom error has been triggered&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Custom error: [1024] A custom error has been triggered</span><br><span class="line">Error on line 14 in C:webfoldertest.php</span><br><span class="line"></span><br><span class="line">Notice: A custom error has been triggered in</span><br><span class="line">C:webfoldertest.php on line 21</span><br></pre></td></tr></table></figure>

<h3 id="restore-exception-handler"><a href="#restore-exception-handler" class="headerlink" title="restore_exception_handler()"></a>restore_exception_handler()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">restore_exception_handler() 函数恢复之前的异常处理程序。</span><br><span class="line">该函数用于在通过 set_exception_handler() 函数改变后恢复之前的异常处理程序。</span><br><span class="line">该函数总是返回 TRUE。</span><br></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">restore_exception_handler()</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">restore_exception_handler();</span><br><span class="line"></span><br><span class="line">throw new Exception(&#39;Uncaught Exception occured&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fatal error: Uncaught exception &#39;Exception&#39; with message</span><br><span class="line">&#39;Uncaught Exception occured&#39; in C:webfoldertest.php:4</span><br><span class="line">Stack trace: #0 &#123;main&#125; thrown in C:webfoldertest.php on line 4</span><br></pre></td></tr></table></figure>

<h3 id="set-error-handler"><a href="#set-error-handler" class="headerlink" title="set_error_handler()"></a>set_error_handler()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set_error_handler() 函数设置用户自定义的错误处理函数。</span><br><span class="line">该函数用于创建运行期间的用户自己的错误处理方法。</span><br><span class="line">该函数返回旧的错误处理程序，如果失败则返回 NULL。</span><br></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set_error_handler(error_function,error_types)</span><br><span class="line">error_function	必需。规定发生错误时运行的函数。</span><br><span class="line">error_types	      可选。规定在哪个错误报告级别会显示用户定义的错误。默认是 &quot;E_ALL&quot;。</span><br><span class="line"></span><br><span class="line">error_function(error_level, error_message, error_file, error_line, error_context)</span><br><span class="line">error_level	    必需的。规定用户自定义的错误的错误报告级别。必须是值数字。可能的错误报告级别详见下面的表格。</span><br><span class="line">error_message	必需的。规定用户自定义的错误的错误消息。</span><br><span class="line">error_file	    可选。规定发生错误的文件名。</span><br><span class="line">error_line	    可选。规定发生错误的行号。</span><br><span class="line">error_context	可选。规定指向活跃符号表中发生错误的数组。换句话说，error_context 将包含一个说明每个变量引发错误的存在范围的数组。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">E_WARNING	运行时非致命的错误。没有停止执行脚本。</span><br><span class="line">E_NOTICE	运行时的通知。脚本发现可能是一个错误，但也可能在正常运行脚本时发生。</span><br><span class="line">E_USER_ERROR	用户生成的致命错误。这就如同由程序员使用 PHP 函数 trigger_error() 生成的 E_ERROR。</span><br><span class="line">E_USER_WARNING	用户生成的非致命错误。这就如同由程序员使用 PHP 函数 trigger_error() 生成的 E_WARNING。</span><br><span class="line">E_USER_NOTICE	用户生成的通知。这就如同由程序员使用 PHP 函数 trigger_error() 生成的 E_NOTICE。</span><br><span class="line">E_RECOVERABLE_ERROR	可捕获的致命错误。这就如同一个可以由用户定义的句柄捕获的 E_ERROR（见 set_error_handler()）。</span><br><span class="line">E_ALL	所有的错误和警告的级别，除了 E_STRICT（自 PHP 6.0 起，E_STRICT 将作为 E_ALL的一部分）。</span><br></pre></td></tr></table></figure>


<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;error handler function</span><br><span class="line">function customError($errno, $errstr, $errfile, $errline)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;b&gt;Custom error:&lt;&#x2F;b&gt; [$errno] $errstr&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">    echo &quot; Error on line $errline in $errfile&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">    echo &quot;Ending Script&quot;;</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;set error handler</span><br><span class="line">set_error_handler(&quot;customError&quot;);</span><br><span class="line"></span><br><span class="line">$test&#x3D;2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;trigger error</span><br><span class="line">if ($test&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">    trigger_error(&quot;A custom error has been triggered&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Custom error: [1024] A custom error has been triggered</span><br><span class="line">Error on line 19 in C:webfoldertest.php</span><br><span class="line">Ending Script</span><br></pre></td></tr></table></figure>

<h3 id="set-exception-handler"><a href="#set-exception-handler" class="headerlink" title="set_exception_handler()"></a>set_exception_handler()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set_exception_handler() 函数设置用户自定义的异常处理函数。</span><br><span class="line">该函数用于创建运行期间的用户自己的异常处理方法。</span><br><span class="line">该函数返回旧的异常处理程序，如果失败则返回 NULL。</span><br></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set_exception_handler(exception_function)</span><br><span class="line">exception_function	必需。规定未捕获的异常发生时调用的函数。</span><br><span class="line">该函数必须在调用 set_exception_handler() 函数之前定义。这个异常处理函数需要需要一个参数，即抛出的 exception 对象。</span><br></pre></td></tr></table></figure>


<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&lt;?php</span><br><span class="line">function myException($exception)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;&lt;b&gt;Exception:&lt;&#x2F;b&gt; &quot; , $exception-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_exception_handler(&#39;myException&#39;);</span><br><span class="line"></span><br><span class="line">throw new Exception(&#39;Uncaught Exception occurred&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception: Uncaught Exception occurred</span><br></pre></td></tr></table></figure>

<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><blockquote>
<p> <a href="https://www.runoob.com/php/php-ref-directory.html" target="_blank" rel="noopener">《PHP 5 Directory 函数 | 菜鸟教程》</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客搭建笔记</title>
    <url>/2020/06/12/article/</url>
    <content><![CDATA[<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><blockquote>
<p>Windows 7</p>
</blockquote>
<h2 id="步骤简略"><a href="#步骤简略" class="headerlink" title="步骤简略"></a>步骤简略</h2><p>按照这几个步骤搭建 hexo</p>
<ol>
<li>安装 git</li>
<li>安装 node.js</li>
<li>安装 hexo</li>
<li>新建 git 仓库</li>
<li>配置 SSH key</li>
<li>部署 hexo 到 github</li>
</ol>
<a id="more"></a>

<h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><p>直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网</a>下载安装即可。</p>
<h2 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h2><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">官网</a>下载安装。<br>重启电脑，执行以下命令检测是否安装成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>安装成功会看到以下结果</p>
<p><img src="https://cdn.learnku.com/uploads/images/202006/11/17165/QRRehz5nW5.png!large" alt="file"></p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>初始化 hexo 到 hexoblog 文件夹中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init hexoblog</span><br></pre></td></tr></table></figure>
<p>进入 hexoblog 文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd hexoblog</span><br></pre></td></tr></table></figure>
<p>安装依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>生成静态文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>本地发布</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>在浏览器打开 localhost:4000 </p>
<h2 id="新建-git-仓库"><a href="#新建-git-仓库" class="headerlink" title="新建 git 仓库"></a>新建 git 仓库</h2><p>在git上新建 ｛git用户名｝.github.io 仓库。如图</p>
<p><img src="https://cdn.learnku.com/uploads/images/202006/11/17165/OifGgedIoZ.png!large" alt="file"></p>
<h2 id="配置ssh-Key"><a href="#配置ssh-Key" class="headerlink" title="配置ssh Key"></a>配置ssh Key</h2><p>生成 ssh Key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;812419396@qq.com&quot;  &#x2F;&#x2F; 此处812419396@qq.com 邮箱需要替换成自己的邮箱</span><br></pre></td></tr></table></figure>
<p>一直按回车键。然后电脑会生成两个文件 <code>id_rsa</code>和<code>id_rsa.pub</code>。将<code>id_rsa.pub</code>里面的信息复制到 github 上。</p>
<p><img src="https://i.loli.net/2020/06/11/ktdc9i8GeN5Ivma.png" alt="image.png"></p>
<p>将<code>id_rsa.pub</code>里面的信息复制到文本框里</p>
<p><img src="https://i.loli.net/2020/06/11/9NuI3deCJl8GsAq.png" alt="image.png"></p>
<h2 id="部署-hexo-到-github"><a href="#部署-hexo-到-github" class="headerlink" title="部署 hexo 到 github"></a>部署 hexo 到 github</h2><p>打开 <code>_config.yml</code> 文件</p>
<p><img src="https://i.loli.net/2020/06/11/9UeN3WigCzQZkOH.png" alt="image.png"></p>
<p>在 <code>_config.yml</code> 末端加上下面代码(ps:repo 的地址换成自己的 github 仓库地址)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;812419396&#x2F;812419396.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>接着在 hexoblog 文件下执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>到这里部署完了。打开浏览器输入 ｛git用户名｝.github.io </p>
<p><img src="https://i.loli.net/2020/06/11/Xio8jHpIABSLmvJ.png" alt="image.png"></p>
<p>参考文章</p>
<blockquote>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.jianshu.com/p/83b3b7d4e649" target="_blank" rel="noopener">5分钟搭建Hexo个人博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>PHP 第三周函数学习记录</title>
    <url>/2020/06/21/php-%E7%AC%AC%E4%B8%89%E5%91%A8%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="natsort"><a href="#natsort" class="headerlink" title="natsort()"></a>natsort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用&quot;自然排序&quot;算法对数组进行排序。键值保留它们原始的键名。</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">natsort(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$temp_files &#x3D; array(&quot;temp15.txt&quot;,&quot;temp10.txt&quot;,</span><br><span class="line">&quot;temp1.txt&quot;,&quot;temp22.txt&quot;,&quot;temp2.txt&quot;);</span><br><span class="line"></span><br><span class="line">sort($temp_files);</span><br><span class="line">echo &quot;Standard sorting: &quot;;</span><br><span class="line">print_r($temp_files);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">natsort($temp_files);</span><br><span class="line">echo &quot;Natural order: &quot;;</span><br><span class="line">print_r($temp_files);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Standard sorting: </span><br><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; temp1.txt </span><br><span class="line">    [1] &#x3D;&gt; temp10.txt </span><br><span class="line">    [2] &#x3D;&gt; temp15.txt </span><br><span class="line">    [3] &#x3D;&gt; temp2.txt </span><br><span class="line">    [4] &#x3D;&gt; temp22.txt </span><br><span class="line">)</span><br><span class="line">Natural order: </span><br><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; temp1.txt </span><br><span class="line">    [3] &#x3D;&gt; temp2.txt</span><br><span class="line">    [1] &#x3D;&gt; temp10.txt </span><br><span class="line">    [2] &#x3D;&gt; temp15.txt</span><br><span class="line">    [4] &#x3D;&gt; temp22.txt </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数将内部指针指向数组中的下一个元素，并输出。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">next(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$people &#x3D; array(&quot;Peter&quot;, &quot;Joe&quot;, &quot;Glenn&quot;, &quot;Cleveland&quot;);</span><br><span class="line"></span><br><span class="line">echo current($people) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo next($people);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Peter</span><br><span class="line">Joe</span><br></pre></td></tr></table></figure>

<h3 id="pos"><a href="#pos" class="headerlink" title="pos()"></a>pos()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回数组中的当前元素的值。</span><br><span class="line">该函数是 current() 函数的别名。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pos(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$people &#x3D; array(&quot;Peter&quot;, &quot;Joe&quot;, &quot;Glenn&quot;, &quot;Cleveland&quot;);</span><br><span class="line"></span><br><span class="line">echo pos($people) . &quot;&lt;br&gt;&quot;;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Peter</span><br></pre></td></tr></table></figure>

<h3 id="prev"><a href="#prev" class="headerlink" title="prev()"></a>prev()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数将内部指针指向数组中的上一个元素，并输出。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prev(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$people &#x3D; array(&quot;Peter&quot;, &quot;Joe&quot;, &quot;Glenn&quot;, &quot;Cleveland&quot;);</span><br><span class="line"></span><br><span class="line">echo current($people) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo next($people) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo prev($people);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Peter</span><br><span class="line">Joe</span><br><span class="line">Peter</span><br></pre></td></tr></table></figure>


<h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数创建一个包含指定范围的元素的数组。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">range(low,high,step)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$number &#x3D; range(0,5);</span><br><span class="line">print_r ($number);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; 0</span><br><span class="line">    [1] &#x3D;&gt; 1</span><br><span class="line">    [2] &#x3D;&gt; 2</span><br><span class="line">    [3] &#x3D;&gt; 3</span><br><span class="line">    [4] &#x3D;&gt; 4</span><br><span class="line">    [5] &#x3D;&gt; 5 </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="reset"><a href="#reset" class="headerlink" title="reset()"></a>reset()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数将内部指针指向数组中的第一个元素，并输出。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reset(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$people &#x3D; array(&quot;Peter&quot;, &quot;Joe&quot;, &quot;Glenn&quot;, &quot;Cleveland&quot;);</span><br><span class="line"></span><br><span class="line">echo current($people) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo next($people) . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">echo reset($people);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Peter</span><br><span class="line">Joe</span><br><span class="line">Peter</span><br></pre></td></tr></table></figure>

<h3 id="rsort"><a href="#rsort" class="headerlink" title="rsort()"></a>rsort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数对数值数组进行降序排序。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rsort(array,sortingtype);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$numbers&#x3D;array(4,6,2,22,11);</span><br><span class="line">rsort($numbers);</span><br><span class="line">print_r($numbers);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; 22</span><br><span class="line">    [1] &#x3D;&gt; 11</span><br><span class="line">    [2] &#x3D;&gt; 6</span><br><span class="line">    [3] &#x3D;&gt; 4</span><br><span class="line">    [4] &#x3D;&gt; 2</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle()"></a>shuffle()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把数组中的元素按随机顺序重新排列。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shuffle(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$my_array &#x3D; array(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;purple&quot;);</span><br><span class="line"></span><br><span class="line">shuffle($my_array);</span><br><span class="line">print_r($my_array);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; blue </span><br><span class="line">    [1] &#x3D;&gt; green </span><br><span class="line">    [2] &#x3D;&gt; yellow </span><br><span class="line">    [3] &#x3D;&gt; red</span><br><span class="line">    [4] &#x3D;&gt; purple </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof()"></a>sizeof()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回数组中元素的数目。</span><br><span class="line">是 count() 函数的别名</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sizeof(array,mode)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);</span><br><span class="line">echo sizeof($cars);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>


<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数对数值数组进行升序排序。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort(array,sortingtype);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$numbers&#x3D;array(4,6,2,22,11);</span><br><span class="line">sort($numbers);</span><br><span class="line">print_r($numbers);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; 2</span><br><span class="line">    [1] &#x3D;&gt; 4</span><br><span class="line">    [2] &#x3D;&gt; 6</span><br><span class="line">    [3] &#x3D;&gt; 11</span><br><span class="line">    [4] &#x3D;&gt; 22</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="uasort"><a href="#uasort" class="headerlink" title="uasort()"></a>uasort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数对数值数组进行升序排序。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uasort(array,myfunction);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function my_sort($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">    if ($a&#x3D;&#x3D;$b) return 0;</span><br><span class="line">    return ($a&lt;$b)?-1:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$arr&#x3D;array(&quot;a&quot;&#x3D;&gt;4,&quot;b&quot;&#x3D;&gt;2,&quot;c&quot;&#x3D;&gt;8,d&#x3D;&gt;&quot;6&quot;);</span><br><span class="line">uasort($arr,&quot;my_sort&quot;);</span><br><span class="line">print_r($arr);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [b] &#x3D;&gt; 2</span><br><span class="line">    [a] &#x3D;&gt; 4</span><br><span class="line">    [d] &#x3D;&gt; 6</span><br><span class="line">    [c] &#x3D;&gt; 8</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="uksort"><a href="#uksort" class="headerlink" title="uksort()"></a>uksort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数使用用户自定义的比较函数对数组按键名进行排序。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uksort(array,myfunction);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function my_sort($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">if ($a&#x3D;&#x3D;$b) return 0;</span><br><span class="line">return ($a&lt;$b)?-1:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$arr&#x3D;array(&quot;a&quot;&#x3D;&gt;4,&quot;b&quot;&#x3D;&gt;2,&quot;c&quot;&#x3D;&gt;8,d&#x3D;&gt;&quot;6&quot;);</span><br><span class="line">uksort($arr,&quot;my_sort&quot;);</span><br><span class="line">print_r($arr);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [a] &#x3D;&gt; 4</span><br><span class="line">    [b] &#x3D;&gt; 2</span><br><span class="line">    [c] &#x3D;&gt; 8</span><br><span class="line">    [d] &#x3D;&gt; 6</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="usort"><a href="#usort" class="headerlink" title="usort()"></a>usort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用用户自定义的比较函数对数组进行排序。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usort(array,myfunction);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function my_sort($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">if ($a&#x3D;&#x3D;$b) return 0;</span><br><span class="line">return ($a&lt;$b)?-1:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a&#x3D;array(4,2,8,6);</span><br><span class="line">usort($a,&quot;my_sort&quot;);</span><br><span class="line">print_r($a);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; 2</span><br><span class="line">    [1] &#x3D;&gt; 4</span><br><span class="line">    [2] &#x3D;&gt; 6</span><br><span class="line">    [3] &#x3D;&gt; 8</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="cal-days-in-month"><a href="#cal-days-in-month" class="headerlink" title="cal_days_in_month()"></a>cal_days_in_month()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数针对指定的年份和历法，返回一个月中的天数</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cal_days_in_month(calendar,month,year);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$d&#x3D;cal_days_in_month(CAL_GREGORIAN,10,2005);</span><br><span class="line">echo &quot;There was $d days in October 2005&quot;;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">There was 31 days in October 2005</span><br></pre></td></tr></table></figure>

<h3 id="cal-from-jd"><a href="#cal-from-jd" class="headerlink" title="cal_from_jd()"></a>cal_from_jd()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把儒略日计数转换为指定历法的日期</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cal_from_jd(jd,calendar);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$d&#x3D;unixtojd(mktime(0,0,0,6,20,2007));</span><br><span class="line">print_r(cal_from_jd($d,CAL_GREGORIAN));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [date] &#x3D;&gt; 6&#x2F;20&#x2F;2007</span><br><span class="line">    [month] &#x3D;&gt; 6</span><br><span class="line">    [day] &#x3D;&gt; 20</span><br><span class="line">    [year] &#x3D;&gt; 2007</span><br><span class="line">    [dow] &#x3D;&gt; 3</span><br><span class="line">    [abbrevdayname] &#x3D;&gt; Wed</span><br><span class="line">    [dayname] &#x3D;&gt; Wednesday</span><br><span class="line">    [abbrevmonth] &#x3D;&gt; Jun</span><br><span class="line">    [monthname] &#x3D;&gt; June</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="cal-info"><a href="#cal-info" class="headerlink" title="cal_info()"></a>cal_info()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回有关指定历法的信息</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cal_info(calendar);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print_r(cal_info(0));</span><br><span class="line">print_r(cal_info(1));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [months] &#x3D;&gt; Array ( </span><br><span class="line">        [1] &#x3D;&gt; January</span><br><span class="line">        [2] &#x3D;&gt; February</span><br><span class="line">        [3] &#x3D;&gt; March</span><br><span class="line">        [4] &#x3D;&gt; April </span><br><span class="line">        [5] &#x3D;&gt; May</span><br><span class="line">        [6] &#x3D;&gt; June </span><br><span class="line">        [7] &#x3D;&gt; July </span><br><span class="line">        [8] &#x3D;&gt; August</span><br><span class="line">        [9] &#x3D;&gt; September </span><br><span class="line">        [10] &#x3D;&gt; October</span><br><span class="line">        [11] &#x3D;&gt; November </span><br><span class="line">        [12] &#x3D;&gt; December </span><br><span class="line">    ) </span><br><span class="line">    [abbrevmonths] &#x3D;&gt; Array (</span><br><span class="line">        [1] &#x3D;&gt; Jan </span><br><span class="line">        [2] &#x3D;&gt; Feb </span><br><span class="line">        [3] &#x3D;&gt; Mar </span><br><span class="line">        [4] &#x3D;&gt; Apr</span><br><span class="line">        [5] &#x3D;&gt; May</span><br><span class="line">        [6] &#x3D;&gt; Jun</span><br><span class="line">        [7] &#x3D;&gt; Jul </span><br><span class="line">        [8] &#x3D;&gt; Aug</span><br><span class="line">        [9] &#x3D;&gt; Sep </span><br><span class="line">        [10] &#x3D;&gt; Oct </span><br><span class="line">        [11] &#x3D;&gt; Nov </span><br><span class="line">        [12] &#x3D;&gt; Dec </span><br><span class="line">    ) </span><br><span class="line">    [maxdaysinmonth] &#x3D;&gt; 31 </span><br><span class="line">    [calname] &#x3D;&gt; Gregorian</span><br><span class="line">    [calsymbol] &#x3D;&gt; CAL_GREGORIAN </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Array (</span><br><span class="line">    [months] &#x3D;&gt; Array ( </span><br><span class="line">        [1] &#x3D;&gt; January </span><br><span class="line">        [2] &#x3D;&gt; February</span><br><span class="line">        [3] &#x3D;&gt; March</span><br><span class="line">        [4] &#x3D;&gt; April</span><br><span class="line">        [5] &#x3D;&gt; May </span><br><span class="line">        [6] &#x3D;&gt; June</span><br><span class="line">        [7] &#x3D;&gt; July </span><br><span class="line">        [8] &#x3D;&gt; August</span><br><span class="line">        [9] &#x3D;&gt; September</span><br><span class="line">        [10] &#x3D;&gt; October </span><br><span class="line">        [11] &#x3D;&gt; November</span><br><span class="line">        [12] &#x3D;&gt; December</span><br><span class="line">    ) </span><br><span class="line">    [abbrevmonths] &#x3D;&gt; Array (</span><br><span class="line">        [1] &#x3D;&gt; Jan</span><br><span class="line">        [2] &#x3D;&gt; Feb</span><br><span class="line">        [3] &#x3D;&gt; Mar</span><br><span class="line">        [4] &#x3D;&gt; Apr </span><br><span class="line">        [5] &#x3D;&gt; May </span><br><span class="line">        [6] &#x3D;&gt; Jun </span><br><span class="line">        [7] &#x3D;&gt; Jul</span><br><span class="line">        [8] &#x3D;&gt; Aug</span><br><span class="line">        [9] &#x3D;&gt; Sep</span><br><span class="line">        [10] &#x3D;&gt; Oct</span><br><span class="line">        [11] &#x3D;&gt; Nov</span><br><span class="line">        [12] &#x3D;&gt; Dec </span><br><span class="line">    ) </span><br><span class="line">    [maxdaysinmonth] &#x3D;&gt; 31</span><br><span class="line">    [calname] &#x3D;&gt; Julian</span><br><span class="line">    [calsymbol] &#x3D;&gt; CAL_JULIAN </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="cal-to-jd"><a href="#cal-to-jd" class="headerlink" title="cal_to_jd()"></a>cal_to_jd()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把指定历法的日期转换为儒略日计数</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cal_to_jd(calendar,month,day,year);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$d&#x3D;cal_to_jd(CAL_GREGORIAN,6,20,2007);</span><br><span class="line">echo $d;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2454272</span><br></pre></td></tr></table></figure>

<h3 id="easter-date"><a href="#easter-date" class="headerlink" title="easter_date()"></a>easter_date()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回指定年份的复活节午夜的 Unix 时间戳</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easter_date(year);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo easter_date() . &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">echo date(&quot;M-d-Y&quot;,easter_date()) . &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">echo date(&quot;M-d-Y&quot;,easter_date(1975)) . &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">echo date(&quot;M-d-Y&quot;,easter_date(1998)) . &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">echo date(&quot;M-d-Y&quot;,easter_date(2007));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1364702400</span><br><span class="line">Mar-31-2013</span><br><span class="line">Mar-30-1975</span><br><span class="line">Apr-12-1998</span><br><span class="line">Apr-08-2007</span><br></pre></td></tr></table></figure>

<h3 id="easter-days"><a href="#easter-days" class="headerlink" title="easter_days()"></a>easter_days()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回指定年份的复活节与 3 月 21 日之间的天数</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easter_days(year,method);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;Easter Day is &quot;. easter_days() . &quot; days after March 21 this year.&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;Easter Day was &quot;. easter_days(1990) . &quot; days after March 21 in 1990.&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;Easter Day was &quot;. easter_days(1342) . &quot; days after March 21 in 1342.&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;Easter Day will be &quot;. easter_days(2050) . &quot; days after March 21 in 2050.&quot;;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Easter Day is 10 days after March 21 this year.</span><br><span class="line">Easter Day was 25 days after March 21 in 1990.</span><br><span class="line">Easter Day was 10 days after March 21 in 1342.</span><br><span class="line">Easter Day will be 20 days after March 21 in 2050.</span><br></pre></td></tr></table></figure>


<h3 id="frenchtojd"><a href="#frenchtojd" class="headerlink" title="frenchtojd()"></a>frenchtojd()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把法国共和历法的日期转换为儒略日计数。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">frenchtojd(month,day,year);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd&#x3D;frenchtojd(3,3,14);</span><br><span class="line">echo $jd . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo jdtofrench($jd);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2380650</span><br><span class="line">3&#x2F;3&#x2F;14</span><br></pre></td></tr></table></figure>


<h3 id="gregoriantojd"><a href="#gregoriantojd" class="headerlink" title="gregoriantojd()"></a>gregoriantojd()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把格利高里历法的日期转换为儒略日计数</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gregoriantojd(month,day,year);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd&#x3D;gregoriantojd(6,20,2007);</span><br><span class="line">echo $jd . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo jdtogregorian($jd);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2454272</span><br><span class="line">6&#x2F;20&#x2F;2007</span><br></pre></td></tr></table></figure>

<h3 id="jddayofweek"><a href="#jddayofweek" class="headerlink" title="jddayofweek()"></a>jddayofweek()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回日期在周几</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jddayofweek(jd,mode);</span><br><span class="line">mode 0 - 默认。以整数返回周的天。（0 为周日, 1 为周一... 依此类推）</span><br><span class="line">     1 - 以字符串返回周的天。（Sunday, Monday, ...）</span><br><span class="line">     2 - 以字符串返回周的天，简写形式。（Sun, Mon, ...）</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd&#x3D;gregoriantojd(1,13,1998);</span><br><span class="line">echo jddayofweek($jd,1);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tuesday</span><br></pre></td></tr></table></figure>

<h3 id="jdmonthname"><a href="#jdmonthname" class="headerlink" title="jdmonthname()"></a>jdmonthname()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回月的名称。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdmonthname(jd,mode);</span><br><span class="line">mode 0 - 格利高里历法 - 简写形式 (Jan, Feb, Mar, ...)</span><br><span class="line">     1 - 格利高里历法 (January, February, March, ...)</span><br><span class="line">     2 - 儒略历法 - 简写形式 (Jan, Feb, Mar, ...)</span><br><span class="line">     3 - 儒略历法 (January, February, March, ...)</span><br><span class="line">     4 - 犹太历法 (Tishri, Heshvan, Kislev, ...)</span><br><span class="line">     5 - 法国共和历法 (Vendemiaire, Brumaire, Frimaire, ...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd &#x3D; gregoriantojd(1,13,1998);</span><br><span class="line">echo jdmonthname($jd,0);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jan</span><br></pre></td></tr></table></figure>

<h3 id="jdtofrench"><a href="#jdtofrench" class="headerlink" title="jdtofrench()"></a>jdtofrench()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把儒略日计数转换为法国共和历法的日期</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdtofrench(jd);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd&#x3D;frenchtojd(3,3,14);</span><br><span class="line">echo $jd . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo jdtofrench($jd);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2380650</span><br><span class="line">3&#x2F;3&#x2F;14</span><br></pre></td></tr></table></figure>


<h3 id="jdtogregorian"><a href="#jdtogregorian" class="headerlink" title="jdtogregorian()"></a>jdtogregorian()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把儒略日计数转换为格利高里历法的日期</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdtogregorian(jd);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd&#x3D;gregoriantojd(6,20,2007);</span><br><span class="line">echo $jd . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo jdtogregorian($jd);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2454272</span><br><span class="line">6&#x2F;20&#x2F;2007</span><br></pre></td></tr></table></figure>


<h3 id="jdtojewish"><a href="#jdtojewish" class="headerlink" title="jdtojewish()"></a>jdtojewish()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把儒略日计数转换为犹太历法的日期。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdtojewish(jd,hebrew,fl);</span><br><span class="line">hebrew      可选。当设置为 TRUE 时表示希伯来语输出格式。默认设置为 FALSE。</span><br><span class="line">fl          可选。定义希伯来语输出格式，可用的格式有</span><br><span class="line">                CAL_JEWISH_ADD_ALAFIM_GERESH</span><br><span class="line">                CAL_JEWISH_ADD_ALAFIM</span><br><span class="line">                CAL_JEWISH_ADD_GERESHAYIM</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd&#x3D;jdtojewish(1789430);</span><br><span class="line">echo $jd;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7&#x2F;14&#x2F;3947</span><br></pre></td></tr></table></figure>


<h3 id="jdtojulian"><a href="#jdtojulian" class="headerlink" title="jdtojulian()"></a>jdtojulian()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把儒略日计数转换为儒略历法的日期。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdtojulian(jd);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd&#x3D;juliantojd(6,20,2007);</span><br><span class="line">echo $jd . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo jdtojulian($jd);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2454285</span><br><span class="line">6&#x2F;20&#x2F;2007</span><br></pre></td></tr></table></figure>

<h3 id="jdtounix"><a href="#jdtounix" class="headerlink" title="jdtounix()"></a>jdtounix()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把儒略日计数转换为 Unix 时间戳。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdtounix(jd);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd&#x3D;gregoriantojd(10,3,1975);</span><br><span class="line">echo jdtounix($jd);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">181526400</span><br></pre></td></tr></table></figure>


<h3 id="jewishtojd"><a href="#jewishtojd" class="headerlink" title="jewishtojd()"></a>jewishtojd()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把犹太历法的日期转换为儒略日计数。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jewishtojd(month,day,year);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd&#x3D;jewishtojd(6,20,2007);</span><br><span class="line">echo $jd;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1080849</span><br></pre></td></tr></table></figure>

<h3 id="juliantojd"><a href="#juliantojd" class="headerlink" title="juliantojd()"></a>juliantojd()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把儒略历法的日期转换为儒略日计数。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">juliantojd(month,day,year);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jd&#x3D;juliantojd(6,20,2007);</span><br><span class="line">echo $jd . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo jdtojulian($jd);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2454285</span><br><span class="line">6&#x2F;20&#x2F;2007</span><br></pre></td></tr></table></figure>

<h3 id="unixtojd"><a href="#unixtojd" class="headerlink" title="unixtojd"></a>unixtojd</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把 Unix 时间戳转换为儒略日计数。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unixtojd(timestamp);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo unixtojd();</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2456557</span><br></pre></td></tr></table></figure>

<h3 id="curl-close"><a href="#curl-close" class="headerlink" title="curl_close"></a>curl_close</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关闭一个cURL会话并且释放所有资源。cURL句柄ch 也会被释放。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void curl_close ( resource $ch )</span><br></pre></td></tr></table></figure>
<p>案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个新cURL资源</span><br><span class="line">$ch &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.w3cschool.cc&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 抓取URL并把它传递给浏览器</span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭cURL资源，并且释放系统资源</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>

<h3 id="curl-copy-handle"><a href="#curl-copy-handle" class="headerlink" title="curl_copy_handle"></a>curl_copy_handle</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">复制一个cURL句柄并保持相同的选项。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource curl_copy_handle ( resource $ch )</span><br></pre></td></tr></table></figure>
<p>案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个新的cURL资源</span><br><span class="line">$ch &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, &#39;http:&#x2F;&#x2F;www.example.com&#x2F;&#39;);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 复制句柄</span><br><span class="line">$ch2 &#x3D; curl_copy_handle($ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 抓取URL (http:&#x2F;&#x2F;www.example.com&#x2F;) 并把它传递给浏览器</span><br><span class="line">curl_exec($ch2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭cURL资源，并且释放系统资源</span><br><span class="line">curl_close($ch2);</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>

<h3 id="curl-errno"><a href="#curl-errno" class="headerlink" title="curl_errno"></a>curl_errno</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回最后一次cURL操作的错误号。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int curl_errno ( resource $ch )</span><br></pre></td></tr></table></figure>
<p>案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个指向一个不存在的位置的cURL句柄</span><br><span class="line">$ch &#x3D; curl_init(&#39;http:&#x2F;&#x2F;404.php.net&#x2F;&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);</span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 检查是否有错误发生</span><br><span class="line">if(curl_errno($ch))</span><br><span class="line">&#123;</span><br><span class="line">    echo &#39;Curl error: &#39; . curl_error($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭句柄</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>


<h3 id="curl-error"><a href="#curl-error" class="headerlink" title="curl_error"></a>curl_error</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回一条最近一次cURL操作明确的文本的错误信息。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string curl_error ( resource $ch )</span><br></pre></td></tr></table></figure>
<p>案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个指向一个不存在的位置的cURL句柄</span><br><span class="line">$ch &#x3D; curl_init(&#39;http:&#x2F;&#x2F;404.php.net&#x2F;&#39;);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);</span><br><span class="line"></span><br><span class="line">if(curl_exec($ch) &#x3D;&#x3D;&#x3D; false)</span><br><span class="line">&#123;</span><br><span class="line">    echo &#39;Curl error: &#39; . curl_error($ch);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &#39;操作完成没有任何错误&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭句柄</span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><blockquote>
<p> <a href="https://www.runoob.com/php/php-ref-array.html" target="_blank" rel="noopener">《PHP 5 Array 函数 | 菜鸟教程》</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 第一周函数学习记录</title>
    <url>/2020/06/14/php1week/</url>
    <content><![CDATA[<h3 id="array-change-key-case"><a href="#array-change-key-case" class="headerlink" title="array_change_key_case()"></a>array_change_key_case()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数将数组的所有的键都转换为大写字母或小写字母</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_change_key_case(array,case)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$testArr &#x3D; array(&#39;a&#39;&#x3D;&gt;1, &#39;B&#39;&#x3D;&gt;2);</span><br><span class="line">&#x2F;&#x2F; CASE_UPPER 键转大写</span><br><span class="line">print_r(array_change_key_case($testArr,CASE_UPPER));</span><br><span class="line">&#x2F;&#x2F; CASE_LOWER 键转小写 默认值</span><br><span class="line">print_r(array_change_key_case($testArr,CASE_LOWER));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [A] &#x3D;&gt; 1</span><br><span class="line">    [B] &#x3D;&gt; 2</span><br><span class="line">)</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [a] &#x3D;&gt; 1</span><br><span class="line">    [b] &#x3D;&gt; 2</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="array-chunk"><a href="#array-chunk" class="headerlink" title="array_chunk()"></a>array_chunk()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数把一个数组分割为新的数组块。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_chunk(array,size,preserve_keys)</span><br><span class="line"></span><br><span class="line">size 规定每个新数组块包含多少个元素。</span><br><span class="line">preserve_keys  true - 保留原始数组中的键名。</span><br><span class="line">               false - 默认。每个新数组块使用从零开始的索引。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$testArr &#x3D; array(&#39;a&#39;&#x3D;&gt;&#39;hhhh&#39;, &#39;B&#39;&#x3D;&gt;&#39;yyyyy&#39;);</span><br><span class="line">&#x2F;&#x2F; 按每块1个元素分块 保留键</span><br><span class="line">print_r(array_chunk($testArr,1, true));</span><br><span class="line">&#x2F;&#x2F; 按每块1个元素分块 不保留键</span><br><span class="line">print_r(array_chunk($testArr,1, false));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [a] &#x3D;&gt; hhhh</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [1] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [B] &#x3D;&gt; yyyyy</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [0] &#x3D;&gt; hhhh</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [1] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [0] &#x3D;&gt; yyyyy</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="array-column"><a href="#array-column" class="headerlink" title="array_column()"></a>array_column()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回输入数组中某个单一列的值</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_column(array, column_key, index_key);</span><br><span class="line">column_key 需要返回值的列</span><br><span class="line">index_key 返回数组的索引&#x2F;键的列</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; array(</span><br><span class="line">  array(</span><br><span class="line">    &#39;id&#39; &#x3D;&gt; 5698,</span><br><span class="line">    &#39;first_name&#39; &#x3D;&gt; &#39;Peter&#39;,</span><br><span class="line">    &#39;last_name&#39; &#x3D;&gt; &#39;Griffin&#39;,</span><br><span class="line">  ),</span><br><span class="line">  array(</span><br><span class="line">    &#39;id&#39; &#x3D;&gt; 4767,</span><br><span class="line">    &#39;first_name&#39; &#x3D;&gt; &#39;Ben&#39;,</span><br><span class="line">    &#39;last_name&#39; &#x3D;&gt; &#39;Smith&#39;,</span><br><span class="line">  ),</span><br><span class="line">  array(</span><br><span class="line">    &#39;id&#39; &#x3D;&gt; 3809,</span><br><span class="line">    &#39;first_name&#39; &#x3D;&gt; &#39;Joe&#39;,</span><br><span class="line">    &#39;last_name&#39; &#x3D;&gt; &#39;Doe&#39;,</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line">$last_names &#x3D; array_column($a, &#39;last_name&#39;, &#39;id&#39;);</span><br><span class="line">print_r($last_names);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">  [5698] &#x3D;&gt; Griffin</span><br><span class="line">  [4767] &#x3D;&gt; Smith</span><br><span class="line">  [3809] &#x3D;&gt; Doe</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="array-combine"><a href="#array-combine" class="headerlink" title="array_combine()"></a>array_combine()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数通过合并两个数组来创建一个新数组，其中的一个数组元素为键名，另一个数组的元素为键值</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_combine(keys,values);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$fname &#x3D; array(&quot;Peter&quot;, &quot;Ben&quot;, &quot;Joe&quot;);</span><br><span class="line">$age &#x3D; array(&quot;35&quot;, &quot;37&quot;, &quot;43&quot;);</span><br><span class="line"></span><br><span class="line">$c &#x3D; array_combine($fname, $age);</span><br><span class="line">print_r($c);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [Peter] &#x3D;&gt; 35 </span><br><span class="line">    [Ben] &#x3D;&gt; 37</span><br><span class="line">    [Joe] &#x3D;&gt; 43 </span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="array-count-values"><a href="#array-count-values" class="headerlink" title="array_count_values()"></a>array_count_values()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于统计数组中所有值出现的次数。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_count_values(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; array(&quot;A&quot;,&quot;Cat&quot;,&quot;Dog&quot;,&quot;A&quot;,&quot;Dog&quot;);</span><br><span class="line">print_r(array_count_values($a));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array (</span><br><span class="line">    [A] &#x3D;&gt; 2 </span><br><span class="line">    [Cat] &#x3D;&gt; 1 </span><br><span class="line">    [Dog] &#x3D;&gt; 2 </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-diff"><a href="#array-diff" class="headerlink" title="array_diff()"></a>array_diff()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于比较两个（或更多个）数组的值，并返回差集</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_diff(array1,array2,array3...);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;,&quot;d&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;e&quot;&#x3D;&gt;&quot;red&quot;,&quot;f&quot;&#x3D;&gt;&quot;black&quot;,&quot;g&quot;&#x3D;&gt;&quot;purple&quot;);</span><br><span class="line">$a3&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;black&quot;,&quot;h&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_diff($a1,$a2,$a3);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [b] &#x3D;&gt; green </span><br><span class="line">    [c] &#x3D;&gt; blue</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="array-diff-assoc"><a href="#array-diff-assoc" class="headerlink" title="array_diff_assoc()"></a>array_diff_assoc()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_diff_assoc() 函数用于比较两个（或更多个）数组的键名和键值 ，并返回差集。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_diff_assoc(array1,array2,array3...);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;,&quot;d&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;f&quot;&#x3D;&gt;&quot;green&quot;,&quot;g&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a3&#x3D;array(&quot;h&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;g&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_diff_assoc($a1,$a2,$a3);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [c] &#x3D;&gt; blue </span><br><span class="line">    [d] &#x3D;&gt; yellow </span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="array-diff-key"><a href="#array-diff-key" class="headerlink" title="array_diff_key()"></a>array_diff_key()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于比较两个（或更多个）数组的键名 ，并返回差集</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_diff_key(array1,array2,array3...);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;,&quot;d&quot;&#x3D;&gt;&quot;pink&quot;);</span><br><span class="line"> </span><br><span class="line">$result&#x3D;array_diff_key($a1,$a2);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [b] &#x3D;&gt; green )</span><br></pre></td></tr></table></figure>


<h3 id="array-diff-uassoc"><a href="#array-diff-uassoc" class="headerlink" title="array_diff_uassoc()"></a>array_diff_uassoc()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比较两个数组的键名和键值（使用用户自定义函数比较键名），并返回差集</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_diff_uassoc(array1,array2,array3...,myfunction);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">   &#123;</span><br><span class="line">   return 0;</span><br><span class="line">   &#125;</span><br><span class="line">   return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;d&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;e&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_diff_uassoc($a1,$a2,&quot;myfunction&quot;);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [a] &#x3D;&gt; red [c] &#x3D;&gt; blue )</span><br></pre></td></tr></table></figure>

<h3 id="array-diff-ukey"><a href="#array-diff-ukey" class="headerlink" title="array_diff_ukey()"></a>array_diff_ukey()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比较两个数组的键名（使用用户自定义函数比较键名），并返回差集</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_diff_ukey(array1,array2,array3...,myfunction);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;blue&quot;,&quot;b&quot;&#x3D;&gt;&quot;black&quot;,&quot;e&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_diff_ukey($a1,$a2,&quot;myfunction&quot;);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [c] &#x3D;&gt; blue )</span><br></pre></td></tr></table></figure>

<h3 id="array-fill"><a href="#array-fill" class="headerlink" title="array_fill()"></a>array_fill()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用给定的键值填充数组</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_fill(index,number,value);</span><br><span class="line">index  数组的起始索引</span><br><span class="line">number 规定填充的元素的数量，其值必须大于 0</span><br><span class="line">value  规定用于填充数组的键值</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array_fill(3,4,&quot;blue&quot;);</span><br><span class="line">$b1&#x3D;array_fill(0,1,&quot;red&quot;);</span><br><span class="line">print_r($a1);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">print_r($b1);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [3] &#x3D;&gt; blue</span><br><span class="line">    [4] &#x3D;&gt; blue </span><br><span class="line">    [5] &#x3D;&gt; blue</span><br><span class="line">    [6] &#x3D;&gt; blue </span><br><span class="line">)</span><br><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; red </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-fill-keys"><a href="#array-fill-keys" class="headerlink" title="array_fill_keys()"></a>array_fill_keys()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定的指定键名的键值填充数组</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_fill_keys(keys,value);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$keys&#x3D;array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;);</span><br><span class="line">$a1&#x3D;array_fill_keys($keys,&quot;blue&quot;);</span><br><span class="line">print_r($a1);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [a] &#x3D;&gt; blue </span><br><span class="line">    [b] &#x3D;&gt; blue </span><br><span class="line">    [c] &#x3D;&gt; blue</span><br><span class="line">    [d] &#x3D;&gt; blue</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter()"></a>array_filter()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用回调函数过滤数组中的元素</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array array_filter ( array $array [, callable $callback [, int $flag &#x3D; 0 ]] )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test_odd($var)</span><br><span class="line">&#123;</span><br><span class="line">    return($var &amp; 1);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$a1&#x3D;array(&quot;a&quot;,&quot;b&quot;,2,3,4);</span><br><span class="line">print_r(array_filter($a1,&quot;test_odd&quot;));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [3] &#x3D;&gt; 3 </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-flip"><a href="#array-flip" class="headerlink" title="array_flip()"></a>array_flip()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于反转&#x2F;交换数组中的键名和对应关联的键值</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_flip(array);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;,&quot;d&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line">$result&#x3D;array_flip($a1);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [red] &#x3D;&gt; a </span><br><span class="line">    [green] &#x3D;&gt; b </span><br><span class="line">    [blue] &#x3D;&gt; c</span><br><span class="line">    [yellow] &#x3D;&gt; d</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-intersect"><a href="#array-intersect" class="headerlink" title="array_intersect()"></a>array_intersect()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">取数组中所有值的交集</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_intersect(array1,array2,array3...);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;,&quot;d&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;e&quot;&#x3D;&gt;&quot;red&quot;,&quot;f&quot;&#x3D;&gt;&quot;green&quot;,&quot;g&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_intersect($a1,$a2);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [a] &#x3D;&gt; red </span><br><span class="line">    [b] &#x3D;&gt; green</span><br><span class="line">    [c] &#x3D;&gt; blue </span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="array-intersect-assoc"><a href="#array-intersect-assoc" class="headerlink" title="array_intersect_assoc()"></a>array_intersect_assoc()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于比较两个（或更多个）数组的键名和键值，并返回交集</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_intersect_assoc(array1,array2,array3...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;,&quot;d&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_intersect_assoc($a1,$a2);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [a] &#x3D;&gt; red</span><br><span class="line">    [b] &#x3D;&gt; green</span><br><span class="line">    [c] &#x3D;&gt; blue </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-intersect-key"><a href="#array-intersect-key" class="headerlink" title="array_intersect_key()"></a>array_intersect_key()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于比较两个（或更多个）数组的键名 ，并返回交集</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_intersect_key(array1,array2,array3...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_intersect_key($a1,$a2);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; red</span><br><span class="line">    [1] &#x3D;&gt; green </span><br><span class="line">    [2] &#x3D;&gt; blue </span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="array-intersect-uassoc"><a href="#array-intersect-uassoc" class="headerlink" title="array_intersect_uassoc()"></a>array_intersect_uassoc()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于比较两个（或更多个）数组的键名和键值 ，并返回交集。</span><br><span class="line">注释：该函数使用用户自定义函数比较键名！</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_intersect_uassoc(array1,array2,array3...,myfunction)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">    if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;d&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;e&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_intersect_uassoc($a1,$a2,&quot;myfunction&quot;);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [b] &#x3D;&gt; green )</span><br></pre></td></tr></table></figure>


<h3 id="array-intersect-ukey"><a href="#array-intersect-ukey" class="headerlink" title="array_intersect_ukey()"></a>array_intersect_ukey()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于比较两个（或更多个）数组的键名 ，并返回交集。 使用用户自定义函数比较键名</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_intersect_ukey(array1,array2,array3...,myfunction)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">    if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;black&quot;,&quot;b&quot;&#x3D;&gt;&quot;yellow&quot;,&quot;d&quot;&#x3D;&gt;&quot;brown&quot;);</span><br><span class="line">$a3&#x3D;array(&quot;e&quot;&#x3D;&gt;&quot;purple&quot;,&quot;f&quot;&#x3D;&gt;&quot;white&quot;,&quot;a&quot;&#x3D;&gt;&quot;gold&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_intersect_ukey($a1,$a2,$a3,&quot;myfunction&quot;);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [a] &#x3D;&gt; red )</span><br></pre></td></tr></table></figure>

<h3 id="array-key-exists"><a href="#array-key-exists" class="headerlink" title="array_key_exists()"></a>array_key_exists()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数检查某个数组中是否存在指定的键名，如果键名存在则返回 true，如果键名不存在则返回 false。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_key_exists(key,array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;Volvo&quot;&#x3D;&gt;&quot;XC90&quot;,&quot;BMW&quot;&#x3D;&gt;&quot;X5&quot;);</span><br><span class="line">if (array_key_exists(&quot;Toyota&quot;,$a))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Key exists!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Key does not exist!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Key does not exist!</span><br></pre></td></tr></table></figure>

<h3 id="array-keys"><a href="#array-keys" class="headerlink" title="array_keys()"></a>array_keys()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回包含数组中所有键名的一个新数组。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_keys(array,value,strict)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(10,20,30,&quot;10&quot;);</span><br><span class="line">print_r(array_keys($a,&quot;10&quot;,true));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [0] &#x3D;&gt; 3 )</span><br></pre></td></tr></table></figure>

<h3 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新的值的数组</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_map(myfunction,array1,array2,array3...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($v)</span><br><span class="line">&#123;</span><br><span class="line">return($v*$v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a&#x3D;array(1,2,3,4,5);</span><br><span class="line">print_r(array_map(&quot;myfunction&quot;,$a));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; 1</span><br><span class="line">    [1] &#x3D;&gt; 4</span><br><span class="line">    [2] &#x3D;&gt; 9 </span><br><span class="line">    [3] &#x3D;&gt; 16</span><br><span class="line">    [4] &#x3D;&gt; 25 </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-merge"><a href="#array-merge" class="headerlink" title="array_merge()"></a>array_merge()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于把一个或多个数组合并为一个数组</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_merge(array1,array2,array3...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(3&#x3D;&gt;&quot;red&quot;,4&#x3D;&gt;&quot;green&quot;);</span><br><span class="line">print_r(array_merge($a));</span><br><span class="line"></span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;c&quot;&#x3D;&gt;&quot;blue&quot;,&quot;b&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line">print_r(array_merge($a1,$a2));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; red</span><br><span class="line">    [1] &#x3D;&gt; green </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [a] &#x3D;&gt; red</span><br><span class="line">    [b] &#x3D;&gt; yellow</span><br><span class="line">    [c] &#x3D;&gt; blue</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-merge-recursive"><a href="#array-merge-recursive" class="headerlink" title="array_merge_recursive()"></a>array_merge_recursive()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把一个或多个数组合并为一个数组。多个相同键名的值递归组成一个数组</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_merge_recursive(array1,array2,array3...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;c&quot;&#x3D;&gt;&quot;blue&quot;,&quot;b&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line">print_r(array_merge_recursive($a1,$a2));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [a] &#x3D;&gt; red </span><br><span class="line">    [b] &#x3D;&gt; Array ( </span><br><span class="line">                [0] &#x3D;&gt; green</span><br><span class="line">                [1] &#x3D;&gt; yellow </span><br><span class="line">            )</span><br><span class="line">    [c] &#x3D;&gt; blue </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-multisort"><a href="#array-multisort" class="headerlink" title="array_multisort()"></a>array_multisort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回一个排序数组。您可以输入一个或多个数组。函数先对第一个数组进行排序，接着是其他数组，如果两个或多个值相同，它将对下一个数组进行排序。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_multisort(array1,sorting order,sorting type,array2,array3...)</span><br><span class="line"></span><br><span class="line">sorting order   SORT_ASC - 默认。按升序排列 (A-Z)</span><br><span class="line">                SORT_DESC - 按降序排列 (Z-A)。</span><br><span class="line">                </span><br><span class="line">sorting type    SORT_REGULAR - 默认。把每一项按常规顺序排列（Standard ASCII，不改变类型）</span><br><span class="line">                SORT_NUMERIC - 把每一项作为数字来处理。</span><br><span class="line">                SORT_STRING - 把每一项作为字符串来处理。</span><br><span class="line">                SORT_LOCALE_STRING - 把每一项作为字符串来处理，基于当前区域设置（可通过 setlocale() 进行更改）。</span><br><span class="line">                SORT_NATURAL - 把每一项作为字符串来处理，使用类似 natsort() 的自然排序。</span><br><span class="line">                SORT_FLAG_CASE - 可以结合（按位或）SORT_STRING 或 SORT_NATURAL 对字符串进行排序，不区分大小写。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;Dog&quot;,&quot;Cat&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;Fido&quot;,&quot;Missy&quot;);</span><br><span class="line">array_multisort($a1,$a2,SORT_ASC,SORT_NATURAL);</span><br><span class="line">print_r($a1);</span><br><span class="line">print_r($a2);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Dog</span><br><span class="line">    [1] &#x3D;&gt; Cat</span><br><span class="line">)</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Fido</span><br><span class="line">    [1] &#x3D;&gt; Missy</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 第二周函数学习记录</title>
    <url>/2020/06/14/php2week/</url>
    <content><![CDATA[<h3 id="array-pad"><a href="#array-pad" class="headerlink" title="array_pad()"></a>array_pad()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数将指定数量的带有指定值的元素插入到数组中。</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_pad(array, size, value)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;red&quot;, &quot;green&quot;);</span><br><span class="line">print_r(array_pad($a, 5, &quot;blue&quot;));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; red</span><br><span class="line">    [1] &#x3D;&gt; green</span><br><span class="line">    [2] &#x3D;&gt; blue </span><br><span class="line">    [3] &#x3D;&gt; blue </span><br><span class="line">    [4] &#x3D;&gt; blue </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-pop"><a href="#array-pop" class="headerlink" title="array_pop()"></a>array_pop()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数删除数组中的最后一个元素。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_pop(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;);</span><br><span class="line">array_pop($a);</span><br><span class="line">print_r($a);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; red</span><br><span class="line">    [1] &#x3D;&gt; green </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-product"><a href="#array-product" class="headerlink" title="array_product()"></a>array_product()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数计算并返回数组的乘积。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_product(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(5, 5, 2, 10);</span><br><span class="line">echo(array_product($a));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">500</span><br></pre></td></tr></table></figure>

<h3 id="array-push"><a href="#array-push" class="headerlink" title="array_push()"></a>array_push()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向数组尾部插入一个或多个元素</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_push(array, value1, value2...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;, &quot;b&quot;&#x3D;&gt;&quot;green&quot;);</span><br><span class="line">array_push($a, &quot;blue&quot;, &quot;yellow&quot;);</span><br><span class="line">print_r($a);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [a] &#x3D;&gt; red</span><br><span class="line">    [b] &#x3D;&gt; green</span><br><span class="line">    [0] &#x3D;&gt; blue </span><br><span class="line">    [1] &#x3D;&gt; yellow </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-rand"><a href="#array-rand" class="headerlink" title="array_rand()"></a>array_rand()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回数组中的一个随机键名，或者如果指定函数返回键名不只一个，则返回一个包含随机键名的数组</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_rand(array, number)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;, &quot;b&quot;&#x3D;&gt;&quot;green&quot;, &quot;c&quot;&#x3D;&gt;&quot;blue&quot;, &quot;d&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line">print_r(array_rand($a, 2));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; a</span><br><span class="line">    [1] &#x3D;&gt; b</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="array-reduce"><a href="#array-reduce" class="headerlink" title="array_reduce()"></a>array_reduce()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数发送数组中的值到用户自定义函数，并返回一个字符串</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_reduce(array, myfunction, initial)</span><br><span class="line"></span><br><span class="line">initial  可选。规定发送到函数处理的第一个值。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($v1,$v2)</span><br><span class="line">&#123;</span><br><span class="line">    echo &#39;v1:&#39;;</span><br><span class="line">    print_r($v1);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo &#39;v2:&#39;;</span><br><span class="line">    print_r($v2);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    return $v1 . &quot;-&quot; . $v2;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">$a&#x3D;array(&#39;a&#39;&#x3D;&gt;&quot;Dog&quot;,&#39;b&#39;&#x3D;&gt;&quot;Cat&quot;,&#39;c&#39;&#x3D;&gt;&quot;Horse&quot;, &#39;a&#39;);</span><br><span class="line">print_r(array_reduce($a,&quot;myfunction&quot;));</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;------------------------------------&quot;;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">print_r(array_reduce($a,&quot;myfunction&quot;, 5));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v1:</span><br><span class="line">v2:Dog</span><br><span class="line">v1:-Dog</span><br><span class="line">v2:Cat</span><br><span class="line">v1:-Dog-Cat</span><br><span class="line">v2:Horse</span><br><span class="line">v1:-Dog-Cat-Horse</span><br><span class="line">v2:a</span><br><span class="line">-Dog-Cat-Horse-a</span><br><span class="line">------------------------------------</span><br><span class="line">v1:5</span><br><span class="line">v2:Dog</span><br><span class="line">v1:5-Dog</span><br><span class="line">v2:Cat</span><br><span class="line">v1:5-Dog-Cat</span><br><span class="line">v2:Horse</span><br><span class="line">v1:5-Dog-Cat-Horse</span><br><span class="line">v2:a</span><br><span class="line">5-Dog-Cat-Horse-a</span><br></pre></td></tr></table></figure>

<h3 id="array-replace"><a href="#array-replace" class="headerlink" title="array_replace()"></a>array_replace()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用后面数组的值替换第一个数组的值</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_replace(array1,array2,array3...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;, &quot;green&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;orange&quot;, &quot;b&quot;&#x3D;&gt;&quot;burgundy&quot;);</span><br><span class="line">print_r(array_replace($a1, $a2));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [a] &#x3D;&gt; orange </span><br><span class="line">    [0] &#x3D;&gt; green </span><br><span class="line">    [b] &#x3D;&gt; burgundy </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-replace-recursive"><a href="#array-replace-recursive" class="headerlink" title="array_replace_recursive()"></a>array_replace_recursive()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数递归地使用后面数组的值替换第一个数组的值</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_replace_recursive(array1,array2,array3...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(</span><br><span class="line">    &quot;a&quot;&#x3D;&gt;array(&quot;red&quot;),</span><br><span class="line">    &quot;b&quot;&#x3D;&gt;array(&quot;green&quot;,&quot;blue&quot;),</span><br><span class="line">);</span><br><span class="line">$a2&#x3D;array(</span><br><span class="line">    &quot;a&quot;&#x3D;&gt;array(&quot;yellow&quot;),</span><br><span class="line">    &quot;b&quot;&#x3D;&gt;array(&quot;black&quot;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_replace_recursive($a1,$a2);</span><br><span class="line">print_r($result);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_replace($a1,$a2);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [a] &#x3D;&gt; Array ( </span><br><span class="line">        [0] &#x3D;&gt; yellow </span><br><span class="line">    )</span><br><span class="line">    [b] &#x3D;&gt; Array (</span><br><span class="line">        [0] &#x3D;&gt; black </span><br><span class="line">        [1] &#x3D;&gt; blue </span><br><span class="line">    ) </span><br><span class="line">) </span><br><span class="line">Array (</span><br><span class="line">    [a] &#x3D;&gt; Array (</span><br><span class="line">        [0] &#x3D;&gt; yellow </span><br><span class="line">    ) </span><br><span class="line">    [b] &#x3D;&gt; Array ( </span><br><span class="line">        [0] &#x3D;&gt; black</span><br><span class="line">    ) </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-reverse"><a href="#array-reverse" class="headerlink" title="array_reverse()"></a>array_reverse()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回翻转顺序的数组。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_reverse(array,preserve)</span><br><span class="line">preserve	可选。规定是否保留原始数组的键名。</span><br><span class="line">            如果设置为 TRUE 会保留数字的键。 非数字的键则不受这个设置的影响，总是会被保留。</span><br><span class="line">            可能的值：true false</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;Volvo&quot;,&quot;XC90&quot;,array(&quot;BMW&quot;,&quot;Toyota&quot;));</span><br><span class="line">$reverse&#x3D;array_reverse($a);</span><br><span class="line">$preserve&#x3D;array_reverse($a,true);</span><br><span class="line"> </span><br><span class="line">print_r($a);</span><br><span class="line">print_r($reverse);</span><br><span class="line">print_r($preserve);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array (</span><br><span class="line">    [0] &#x3D;&gt; Volvo</span><br><span class="line">    [1] &#x3D;&gt; XC90</span><br><span class="line">    [2] &#x3D;&gt; Array ( </span><br><span class="line">        [0] &#x3D;&gt; BMW </span><br><span class="line">        [1] &#x3D;&gt; Toyota </span><br><span class="line">    ) </span><br><span class="line">) </span><br><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; Array ( </span><br><span class="line">        [0] &#x3D;&gt; BMW </span><br><span class="line">        [1] &#x3D;&gt; Toyota</span><br><span class="line">        )</span><br><span class="line">    [1] &#x3D;&gt; XC90</span><br><span class="line">    [2] &#x3D;&gt; Volvo</span><br><span class="line">) </span><br><span class="line">Array ( </span><br><span class="line">    [2] &#x3D;&gt; Array ( </span><br><span class="line">        [0] &#x3D;&gt; BMW</span><br><span class="line">        [1] &#x3D;&gt; Toyota</span><br><span class="line">    ) </span><br><span class="line">    [1] &#x3D;&gt; XC90 </span><br><span class="line">    [0] &#x3D;&gt; Volvo</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-search"><a href="#array-search" class="headerlink" title="array_search()"></a>array_search()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数在数组中搜索某个键值，并返回对应的键名。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_search(value,array,strict)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;5&quot;,&quot;b&quot;&#x3D;&gt;5,&quot;c&quot;&#x3D;&gt;&quot;5&quot;);</span><br><span class="line">echo array_search(5,$a,true);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure>

<h3 id="array-shift"><a href="#array-shift" class="headerlink" title="array_shift()"></a>array_shift()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于删除数组中的第一个元素，并返回被删除的元素。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_shift(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(0&#x3D;&gt;&quot;red&quot;,1&#x3D;&gt;&quot;green&quot;,2&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">echo array_shift($a);</span><br><span class="line">print_r ($a);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">red</span><br><span class="line">Array ( [0] &#x3D;&gt; green [1] &#x3D;&gt; blue )</span><br></pre></td></tr></table></figure>

<h3 id="array-slice"><a href="#array-slice" class="headerlink" title="array_slice()"></a>array_slice()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回数组中的选定部分</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_slice(array,start,length,preserve)</span><br><span class="line"></span><br><span class="line">preserve  函数是保留键名还是重置键名</span><br><span class="line">          true 保留键名</span><br><span class="line">          false  重置键名</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$a&#x3D;array(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;brown&quot;);</span><br><span class="line">print_r(array_slice($a,1,2,true));</span><br><span class="line"></span><br><span class="line">$a&#x3D;array(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;brown&quot;);</span><br><span class="line">print_r(array_slice($a,1,2,false));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [1] &#x3D;&gt; green [2] &#x3D;&gt; blue ) </span><br><span class="line">Array ( [0] &#x3D;&gt; green [1] &#x3D;&gt; blue )</span><br></pre></td></tr></table></figure>

<h3 id="array-splice"><a href="#array-splice" class="headerlink" title="array_splice()"></a>array_splice()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数从数组中移除选定的元素，并用新元素取代它。函数也将返回被移除元素的数组。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_splice(array,start,length,array)</span><br><span class="line">注释：不保留替代数组中的键名。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;,&quot;d&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;purple&quot;,&quot;b&quot;&#x3D;&gt;&quot;orange&quot;);</span><br><span class="line">print_r(array_splice($a1,0,2,$a2));</span><br><span class="line">print_r($a1);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [a] &#x3D;&gt; red [b] &#x3D;&gt; green ) </span><br><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; purple </span><br><span class="line">    [1] &#x3D;&gt; orange </span><br><span class="line">    [c] &#x3D;&gt; blue</span><br><span class="line">    [d] &#x3D;&gt; yellow </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-sum"><a href="#array-sum" class="headerlink" title="array_sum()"></a>array_sum()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回数组中所有值的和。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_sum(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;a&quot;&#x3D;&gt;52.2,&quot;b&quot;&#x3D;&gt;13.7,&quot;c&quot;&#x3D;&gt;0.9);</span><br><span class="line">echo array_sum($a);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">66.8</span><br></pre></td></tr></table></figure>

<h3 id="array-udiff"><a href="#array-udiff" class="headerlink" title="array_udiff()"></a>array_udiff()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于比较两个（或更多个）数组的键值 ，并返回差集</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_udiff(array1,array2,array3...,myfunction)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">   if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">   &#123;</span><br><span class="line">       return 0;</span><br><span class="line">   &#125;</span><br><span class="line">   return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;,&quot;yellow&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;A&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;GREEN&quot;,&quot;yellow&quot;,&quot;black&quot;);</span><br><span class="line">$a3&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;green&quot;,&quot;b&quot;&#x3D;&gt;&quot;red&quot;,&quot;yellow&quot;,&quot;black&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_udiff($a1,$a2,$a3,&quot;myfunction&quot;);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [c] &#x3D;&gt; blue )</span><br></pre></td></tr></table></figure>

<h3 id="array-udiff-assoc"><a href="#array-udiff-assoc" class="headerlink" title="array_udiff_assoc()"></a>array_udiff_assoc()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于比较两个（或更多个）数组的键名和键值，并返回差集。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_udiff_assoc(array1,array2,array3...,myfunction)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">    if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">    &#123;</span><br><span class="line">       return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;blue&quot;,&quot;c&quot;&#x3D;&gt;&quot;green&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_udiff_assoc($a1,$a2,&quot;myfunction&quot;);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [b] &#x3D;&gt; green [c] &#x3D;&gt; blue )</span><br></pre></td></tr></table></figure>

<h3 id="array-udiff-uassoc"><a href="#array-udiff-uassoc" class="headerlink" title="array_udiff_uassoc()"></a>array_udiff_uassoc()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于比较两个（或更多个）数组的键名和键值，并返回差集。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_udiff_uassoc(array1,array2,array3...,myfunction_key,myfunction_value)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction_key($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">    if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function myfunction_value($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">    if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;green&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_udiff_uassoc($a1,$a2,&quot;myfunction_key&quot;,&quot;myfunction_value&quot;);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [c] &#x3D;&gt; blue )</span><br></pre></td></tr></table></figure>

<h3 id="array-uintersect"><a href="#array-uintersect" class="headerlink" title="array_uintersect()"></a>array_uintersect()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于比较两个（或更多个）数组的键值 ，并返回交集。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_uintersect(array1,array2,array3...,myfunction)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">        if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">        &#123;</span><br><span class="line">                return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;blue&quot;,&quot;b&quot;&#x3D;&gt;&quot;black&quot;,&quot;e&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line"> </span><br><span class="line">$result&#x3D;array_uintersect($a1,$a2,&quot;myfunction&quot;);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [c] &#x3D;&gt; blue )</span><br></pre></td></tr></table></figure>

<h3 id="array-uintersect-assoc"><a href="#array-uintersect-assoc" class="headerlink" title="array_uintersect_assoc()"></a>array_uintersect_assoc()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于比较两个（或更多个）数组的键名和键值 ，并返回交集</span><br><span class="line">注释：该函数使用内建函数比较键名，使用用户自定义函数比较键值！</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_uintersect_assoc(array1,array2,array3...,myfunction)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">   &#123;</span><br><span class="line">   return 0;</span><br><span class="line">   &#125;</span><br><span class="line">   return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;blue&quot;,&quot;c&quot;&#x3D;&gt;&quot;green&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_uintersect_assoc($a1,$a2,&quot;myfunction&quot;);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [a] &#x3D;&gt; red )</span><br></pre></td></tr></table></figure>

<h3 id="array-uintersect-uassoc"><a href="#array-uintersect-uassoc" class="headerlink" title="array_uintersect_uassoc()"></a>array_uintersect_uassoc()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于比较两个（或更多个）数组的键名和键值，并返回交集。</span><br><span class="line">注释：该函数使用两个用户自定义函数进行比较；第一个函数比较键名，第二个函数比较键值！</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_uintersect_uassoc(array1,array2,array3...,myfunction_key,myfunction_value)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction_key($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">    if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function myfunction_value($a,$b)</span><br><span class="line">&#123;</span><br><span class="line">    if ($a&#x3D;&#x3D;&#x3D;$b)</span><br><span class="line">    &#123;</span><br><span class="line">       return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return ($a&gt;$b)?1:-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">$a2&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;green&quot;);</span><br><span class="line"></span><br><span class="line">$result&#x3D;array_uintersect_uassoc($a1,$a2,&quot;myfunction_key&quot;,&quot;myfunction_value&quot;);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [a] &#x3D;&gt; red [b] &#x3D;&gt; green )</span><br></pre></td></tr></table></figure>

<h3 id="array-unique"><a href="#array-unique" class="headerlink" title="array_unique()"></a>array_unique()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于移除数组中重复的值。如果两个或更多个数组值相同，只保留第一个值，其他的值被移除。</span><br><span class="line">注释：被保留的数组将保持第一个数组项的键名类型。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_unique(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;red&quot;);</span><br><span class="line">print_r(array_unique($a));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [a] &#x3D;&gt; red [b] &#x3D;&gt; green )</span><br></pre></td></tr></table></figure>

<h3 id="array-unshift"><a href="#array-unshift" class="headerlink" title="array_unshift()"></a>array_unshift()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于向数组插入新元素。新数组的值将被插入到数组的开头。返回元素的个数</span><br><span class="line">注释：数值键名将从 0 开始，以 1 递增。字符串键名将保持不变。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_unshift(array,value1,value2,value3...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;);</span><br><span class="line">print_r(array_unshift($a,&quot;blue&quot;));</span><br><span class="line">print_r($a);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; blue </span><br><span class="line">    [a] &#x3D;&gt; red </span><br><span class="line">    [b] &#x3D;&gt; green </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-values"><a href="#array-values" class="headerlink" title="array_values()"></a>array_values()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回包含数组中所有的值的数组。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_values(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;Name&quot;&#x3D;&gt;&quot;Peter&quot;,&quot;Age&quot;&#x3D;&gt;&quot;41&quot;,&quot;Country&quot;&#x3D;&gt;&quot;USA&quot;);</span><br><span class="line">print_r(array_values($a));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [0] &#x3D;&gt; Peter</span><br><span class="line">    [1] &#x3D;&gt; 41 </span><br><span class="line">    [2] &#x3D;&gt; USA </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-walk"><a href="#array-walk" class="headerlink" title="array_walk()"></a>array_walk()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数对数组中的每个元素应用用户自定义函数。在函数中，数组的键名和键值是参数。</span><br><span class="line">注释：您可以通过把用户自定义函数中的第一个参数指定为引用：&amp;$value，来改变数组元素的值</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_walk(array,myfunction,parameter...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction(&amp;$value,$key)</span><br><span class="line">&#123;</span><br><span class="line">$value&#x3D;&quot;yellow&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$a&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">array_walk($a,&quot;myfunction&quot;);</span><br><span class="line">print_r($a);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [a] &#x3D;&gt; yellow</span><br><span class="line">    [b] &#x3D;&gt; yellow </span><br><span class="line">    [c] &#x3D;&gt; yellow </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="array-walk-recursive"><a href="#array-walk-recursive" class="headerlink" title="array_walk_recursive()"></a>array_walk_recursive()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数对数组中的每个元素应用用户自定义函数。在函数中，数组的键名和键值是参数。该函数与 array_walk() 函数的不同在于可以操作更深的数组（一个数组中包含另一个数组）。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_walk_recursive(array,myfunction,parameter...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction($value,$key)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;The key $key has the value $value&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$a1&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;);</span><br><span class="line">$a2&#x3D;array($a1,&quot;1&quot;&#x3D;&gt;&quot;blue&quot;,&quot;2&quot;&#x3D;&gt;&quot;yellow&quot;);</span><br><span class="line">array_walk_recursive($a2,&quot;myfunction&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The key a has the value red</span><br><span class="line">The key b has the value green</span><br><span class="line">The key 1 has the value blue</span><br><span class="line">The key 2 has the value yellow</span><br></pre></td></tr></table></figure>

<h3 id="arsort"><a href="#arsort" class="headerlink" title="arsort()"></a>arsort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数对关联数组按照键值进行降序排序</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arsort(array,sortingtype);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$age&#x3D;array(&quot;Peter&quot;&#x3D;&gt;&quot;35&quot;,&quot;Ben&quot;&#x3D;&gt;&quot;37&quot;,&quot;Joe&quot;&#x3D;&gt;&quot;43&quot;);</span><br><span class="line">arsort($age);</span><br><span class="line">print_r($age);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [Joe] &#x3D;&gt; 43</span><br><span class="line">    [Ben] &#x3D;&gt; 37 </span><br><span class="line">    [Peter] &#x3D;&gt; 35 </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="asort"><a href="#asort" class="headerlink" title="asort()"></a>asort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数对关联数组按照键值进升序排序。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">asort(array,sortingtype);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$age&#x3D;array(&quot;Peter&quot;&#x3D;&gt;&quot;35&quot;,&quot;Ben&quot;&#x3D;&gt;&quot;37&quot;,&quot;Joe&quot;&#x3D;&gt;&quot;43&quot;);</span><br><span class="line">asort($age);</span><br><span class="line">print_r($age);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [Peter] &#x3D;&gt; 35</span><br><span class="line">    [Ben] &#x3D;&gt; 37 </span><br><span class="line">    [Joe] &#x3D;&gt; 43 </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="compact"><a href="#compact" class="headerlink" title="compact()"></a>compact()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数创建一个包含变量名和它们的值的数组。</span><br><span class="line">注释：任何没有变量名与之对应的字符串都被略过。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compact(var1,var2...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$firstname &#x3D; &quot;Peter&quot;;</span><br><span class="line">$lastname &#x3D; &quot;Griffin&quot;;</span><br><span class="line">$age &#x3D; &quot;41&quot;;</span><br><span class="line"></span><br><span class="line">$name &#x3D; array(&quot;firstname&quot;, &quot;lastname&quot;);</span><br><span class="line">$result &#x3D; compact($name, &quot;location&quot;, &quot;age&quot;);</span><br><span class="line"></span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [firstname] &#x3D;&gt; Peter </span><br><span class="line">    [lastname] &#x3D;&gt; Griffin </span><br><span class="line">    [age] &#x3D;&gt; 41 </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回数组中元素的数目</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count(array,mode)</span><br><span class="line"></span><br><span class="line">mode  0 - 默认。不计算多维数组中的所有元素。</span><br><span class="line">      1 - 递归地计算数组中元素的数目（计算多维数组中的所有元素）。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);</span><br><span class="line">echo count($cars);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="current"><a href="#current" class="headerlink" title="current()"></a>current()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回数组中的当前元素的值</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">current(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$people &#x3D; array(&quot;Peter&quot;, &quot;Joe&quot;, &quot;Glenn&quot;, &quot;Cleveland&quot;);</span><br><span class="line">echo current($people) . &quot;&lt;br&gt;&quot;;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Peter</span><br></pre></td></tr></table></figure>

<h3 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数将内部指针指向数组中的最后一个元素，并输出</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">end(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$people &#x3D; array(&quot;Peter&quot;, &quot;Joe&quot;, &quot;Glenn&quot;, &quot;Cleveland&quot;);</span><br><span class="line"></span><br><span class="line">echo current($people) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo end($people);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Peter</span><br><span class="line">Cleveland</span><br></pre></td></tr></table></figure>

<h3 id="extract"><a href="#extract" class="headerlink" title="extract()"></a>extract()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数从数组中将变量导入到当前的符号表</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extract(array,extract_rules,prefix)</span><br><span class="line"></span><br><span class="line">extract_rules    函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定</span><br><span class="line"></span><br><span class="line">                    EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。</span><br><span class="line">                    EXTR_SKIP - 如果有冲突，不覆盖已有的变量。</span><br><span class="line">                    EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。</span><br><span class="line">                    EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix。</span><br><span class="line">                    EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 prefix。</span><br><span class="line">                    EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。</span><br><span class="line">                    EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。</span><br><span class="line">                    EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; &quot;Original&quot;;</span><br><span class="line">$my_array &#x3D; array(&quot;a&quot; &#x3D;&gt; &quot;Cat&quot;, &quot;b&quot; &#x3D;&gt; &quot;Dog&quot;, &quot;c&quot; &#x3D;&gt; &quot;Horse&quot;);</span><br><span class="line"></span><br><span class="line">extract($my_array, EXTR_PREFIX_SAME, &quot;dup&quot;);</span><br><span class="line"></span><br><span class="line">echo &quot;\$a &#x3D; $a; \$b &#x3D; $b; \$c &#x3D; $c; \$dup_a &#x3D; $dup_a&quot;;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; Original; $b &#x3D; Dog; $c &#x3D; Horse; $dup_a &#x3D; Cat</span><br></pre></td></tr></table></figure>

<h3 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">搜索数组中是否存在指定的值。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool in_array ( mixed $needle , array $haystack [, bool $strict &#x3D; FALSE ] )</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$people &#x3D; array(&quot;Peter&quot;, &quot;Joe&quot;, &quot;Glenn&quot;, &quot;Cleveland&quot;, 23);</span><br><span class="line"> </span><br><span class="line">if (in_array(&quot;23&quot;, $people, TRUE))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Match found&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Match not found&lt;br&gt;&quot;;</span><br><span class="line">&#125; </span><br><span class="line">if (in_array(&quot;Glenn&quot;,$people, TRUE))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Match found&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Match not found&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">if (in_array(23,$people, TRUE))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Match found&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Match not found&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Match not found</span><br><span class="line">Match found</span><br><span class="line">Match found</span><br></pre></td></tr></table></figure>

<h3 id="key"><a href="#key" class="headerlink" title="key()"></a>key()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数从当前内部指针位置返回元素键名。。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$people&#x3D;array(&quot;Peter&quot;,&quot;Joe&quot;,&quot;Glenn&quot;,&quot;Cleveland&quot;);</span><br><span class="line">echo &quot;The key from the current position is: &quot; . key($people);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The key from the current position is: 0</span><br></pre></td></tr></table></figure>

<h3 id="krsort"><a href="#krsort" class="headerlink" title="krsort()"></a>krsort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数对关联数组按照键名进行降序排序。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">krsort(array,sortingtype);</span><br><span class="line">sortingtype     0 &#x3D; SORT_REGULAR - 默认。把每一项按常规顺序排列（Standard ASCII，不改变类型）。</span><br><span class="line">                1 &#x3D; SORT_NUMERIC - 把每一项作为数字来处理。</span><br><span class="line">                2 &#x3D; SORT_STRING - 把每一项作为字符串来处理。</span><br><span class="line">                3 &#x3D; SORT_LOCALE_STRING - 把每一项作为字符串来处理，基于当前区域设置（可通过 setlocale() 进行更改）。</span><br><span class="line">                4 &#x3D; SORT_NATURAL - 把每一项作为字符串来处理，使用类似 natsort() 的自然排序。</span><br><span class="line">                5 &#x3D; SORT_FLAG_CASE - 可以结合（按位或）SORT_STRING 或 SORT_NATURAL 对字符串进行排序，不区分大小写。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$age&#x3D;array(&quot;Peter&quot;&#x3D;&gt;&quot;35&quot;,&quot;Ben&quot;&#x3D;&gt;&quot;37&quot;,&quot;Joe&quot;&#x3D;&gt;&quot;43&quot;);</span><br><span class="line">krsort($age);</span><br><span class="line"></span><br><span class="line">foreach($age as $x&#x3D;&gt;$x_value)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Key&#x3D;&quot; . $x . &quot;, Value&#x3D;&quot; . $x_value;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Key&#x3D;Peter, Value&#x3D;35</span><br><span class="line">Key&#x3D;Joe, Value&#x3D;43</span><br><span class="line">Key&#x3D;Ben, Value&#x3D;37</span><br></pre></td></tr></table></figure>

<h3 id="ksort"><a href="#ksort" class="headerlink" title="ksort()"></a>ksort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数对关联数组按照键名进行升序排序</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">krsort(array,sortingtype);</span><br><span class="line">sortingtype     0 &#x3D; SORT_REGULAR -默认。把每一项按常规顺序排列（Standard ASCII，不改变类型）。</span><br><span class="line">                1 &#x3D; SORT_NUMERIC - 把每一项作为数字来处理。</span><br><span class="line">                2 &#x3D; SORT_STRING - 把每一项作为字符串来处理。</span><br><span class="line">                3 &#x3D; SORT_LOCALE_STRING - 把每一项作为字符串来处理，基于当前区域设置（可通过 setlocale() 进行更改）。</span><br><span class="line">                4 &#x3D; SORT_NATURAL - 把每一项作为字符串来处理，使用类似 natsort() 的自然排序。</span><br><span class="line">                5 &#x3D; SORT_FLAG_CASE - 可以结合（按位或）SORT_STRING 或 SORT_NATURAL 对字符串进行排序，不区分大小写。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$age&#x3D;array(&quot;Peter&quot;&#x3D;&gt;&quot;35&quot;,&quot;Ben&quot;&#x3D;&gt;&quot;37&quot;,&quot;Joe&quot;&#x3D;&gt;&quot;43&quot;);</span><br><span class="line">ksort($age);</span><br><span class="line">foreach($age as $x&#x3D;&gt;$x_value)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Key&#x3D;&quot; . $x . &quot;, Value&#x3D;&quot; . $x_value;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Key&#x3D;Ben, Value&#x3D;37</span><br><span class="line">Key&#x3D;Joe, Value&#x3D;43</span><br><span class="line">Key&#x3D;Peter, Value&#x3D;35</span><br></pre></td></tr></table></figure>


<h3 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于在一次操作中给一组变量赋值</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list(var1,var2...)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$my_array &#x3D; array(&quot;Dog&quot;,&quot;Cat&quot;,&quot;Horse&quot;);</span><br><span class="line"></span><br><span class="line">list($a, , $c) &#x3D; $my_array;</span><br><span class="line">echo &quot;Here I only use the $a and $c variables.&quot;;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Here I only use the Dog and Horse variables.</span><br></pre></td></tr></table></figure>


<h3 id="natcasesort"><a href="#natcasesort" class="headerlink" title="natcasesort()"></a>natcasesort()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用&quot;自然排序&quot;算法对数组进行排序。键值保留它们原始的键名</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">natcasesort(array)</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$temp_files &#x3D; array(&quot;temp15.txt&quot;,&quot;Temp10.txt&quot;,</span><br><span class="line">&quot;temp1.txt&quot;,&quot;Temp22.txt&quot;,&quot;temp2.txt&quot;);</span><br><span class="line"></span><br><span class="line">natsort($temp_files);</span><br><span class="line">echo &quot;Natural order: &quot;;</span><br><span class="line">print_r($temp_files);</span><br><span class="line">echo &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line"></span><br><span class="line">natcasesort($temp_files);</span><br><span class="line">echo &quot;Natural order case insensitve: &quot;;</span><br><span class="line">print_r($temp_files);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Natural order:</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Temp10.txt</span><br><span class="line">    [1] &#x3D;&gt; Temp22.txt</span><br><span class="line">    [2] &#x3D;&gt; temp1.txt</span><br><span class="line">    [4] &#x3D;&gt; temp2.txt</span><br><span class="line">    [3] &#x3D;&gt; temp15.txt</span><br><span class="line">)</span><br><span class="line">Natural order case insensitve:</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [2] &#x3D;&gt; temp1.txt</span><br><span class="line">    [4] &#x3D;&gt; temp2.txt</span><br><span class="line">    [0] &#x3D;&gt; Temp10.txt</span><br><span class="line">    [3] &#x3D;&gt; temp15.txt</span><br><span class="line">    [1] &#x3D;&gt; Temp22.txt</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><blockquote>
<p> <a href="https://www.runoob.com/php/php-ref-array.html" target="_blank" rel="noopener">《PHP 5 Array 函数 | 菜鸟教程》</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 第五周函数学习记录</title>
    <url>/2020/07/05/php%E7%AC%AC%E4%BA%94%E5%91%A8%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="checkdate"><a href="#checkdate" class="headerlink" title="checkdate()"></a>checkdate()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于验证格利高里日期。</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checkdate(month,day,year);</span><br><span class="line">month	必需。一个从 1 到 12 的数字，规定月。</span><br><span class="line">day	    必需。一个从 1 到 31 的数字，规定日。</span><br><span class="line">year	必需。一个从 1 到 32767 的数字，规定年。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(checkdate(12,31,-400));</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">var_dump(checkdate(2,29,2003));</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">var_dump(checkdate(2,29,2004));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(false)</span><br><span class="line">bool(false)</span><br><span class="line">bool(true)</span><br></pre></td></tr></table></figure>

<h3 id="date-add"><a href="#date-add" class="headerlink" title="date_add()"></a>date_add()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数添加日、月、年、时、分和秒到一个日期。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_add(object,interval);</span><br><span class="line">object	必需。规定 date_create() 返回的 DateTime 对象。</span><br><span class="line">interval	必需。规定 DateInterval 对象。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create(&quot;2013-03-15&quot;);</span><br><span class="line">date_add($date,date_interval_create_from_date_string(&quot;40 days&quot;));</span><br><span class="line">echo date_format($date,&quot;Y-m-d&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013-04-24</span><br></pre></td></tr></table></figure>

<h3 id="date-create-from-format"><a href="#date-create-from-format" class="headerlink" title="date_create_from_format()"></a>date_create_from_format()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回一个根据指定格式进行格式化的新的 DateTime 对象。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_create_from_format(format,time,timezone);</span><br><span class="line"></span><br><span class="line">参数	描述</span><br><span class="line">format	必需。规定要使用的格式。format 参数字符串可以使用下列的字符：</span><br><span class="line">d - 一个月中的第几天，带前导零</span><br><span class="line">j - 一个月中的第几天，不带前导零</span><br><span class="line">D - 一周中的某天（Mon - Sun）</span><br><span class="line">I - 一周中的某天（Monday - Sunday）</span><br><span class="line">S - 一个月中的第几天的英语后缀（st, nd, rd, th）</span><br><span class="line">F - 月份名称（January - December）</span><br><span class="line">M - 月份名称（Jan - Dec）</span><br><span class="line">m - 月份（01 - 12）</span><br><span class="line">n - 月份（1 - 12）</span><br><span class="line">Y - 年份（例如 2013）</span><br><span class="line">y - 年份（例如 13）</span><br><span class="line">a 和 A - am 或 pm</span><br><span class="line">g - 12 小时制，不带前导零</span><br><span class="line">h - 12 小时制，带前导零</span><br><span class="line">G - 24 小时制，不带前导零</span><br><span class="line">H - 24 小时制，带前导零</span><br><span class="line">i - 分，带前导零</span><br><span class="line">s - 秒，带前导零</span><br><span class="line">u - 微秒（多达六个数字）</span><br><span class="line">e、O、P 和 T - 时区标识符</span><br><span class="line">U - 自 Unix 纪元以来经过的秒数</span><br><span class="line">（空格）</span><br><span class="line"># - 下列分隔符之一：;、:、&#x2F;、.、,、-、(、)</span><br><span class="line">? - 一个随机字节</span><br><span class="line">* - 随机字节直到下一个分隔&#x2F;数字</span><br><span class="line">! - 重置所有字段到 Unix 纪元</span><br><span class="line">| - 如果所有字段都还没被解析，则重置所有字段到 Unix 纪元</span><br><span class="line">+ - 如果存在，字符串中的尾随数据将导致警告，不是错误</span><br><span class="line">time	必需。规定一个日期&#x2F;时间字符串。NULL 表示当前的日期&#x2F;时间。</span><br><span class="line">timezone	可选。规定 time 的时区。默认为当前时区。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create_from_format(&quot;j-M-Y&quot;,&quot;15-Mar-2013&quot;);</span><br><span class="line">echo date_format($date,&quot;Y&#x2F;m&#x2F;d&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013&#x2F;03&#x2F;15</span><br></pre></td></tr></table></figure>

<h3 id="date-create"><a href="#date-create" class="headerlink" title="date_create()"></a>date_create()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回一个新的 DateTime 对象。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_create(time,timezone);</span><br><span class="line">time	可选。规定一个日期&#x2F;时间字符串。NULL 表示当前的日期&#x2F;时间。</span><br><span class="line">timezone	可选。规定 time 的时区。默认是当前时区。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create(&quot;2013-03-15&quot;);</span><br><span class="line">echo date_format($date,&quot;Y&#x2F;m&#x2F;d&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013&#x2F;03&#x2F;15</span><br></pre></td></tr></table></figure>

<h3 id="date-date-set"><a href="#date-date-set" class="headerlink" title="date_date_set()"></a>date_date_set()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数设置一个新的日期。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_date_set(object,year,month,day);</span><br><span class="line">object	必需。规定一个由 date_create() 返回的 DateTime 对象。</span><br><span class="line">year	必需。规定日期中的年。</span><br><span class="line">month	必需。规定日期中的月。</span><br><span class="line">day	    必需。规定日期中的日。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create();</span><br><span class="line">date_date_set($date,2020,10,30);</span><br><span class="line">echo date_format($date,&quot;Y&#x2F;m&#x2F;d&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020&#x2F;10&#x2F;30</span><br></pre></td></tr></table></figure>

<h3 id="date-default-timezone-get"><a href="#date-default-timezone-get" class="headerlink" title="date_default_timezone_get()"></a>date_default_timezone_get()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回脚本中所有日期&#x2F;时间函数使用的默认时区。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_default_timezone_get();</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo date_default_timezone_get();</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Asia&#x2F;Chongqing</span><br></pre></td></tr></table></figure>

<h3 id="date-default-timezone-set"><a href="#date-default-timezone-set" class="headerlink" title="date_default_timezone_set()"></a>date_default_timezone_set()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数设置脚本中所有日期&#x2F;时间函数使用的默认时区</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_default_timezone_set(timezone);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_default_timezone_set(&quot;Asia&#x2F;Shanghai&quot;);</span><br><span class="line">echo date_default_timezone_get();</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure>

<h3 id="date-diff"><a href="#date-diff" class="headerlink" title="date_diff()"></a>date_diff()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回两个 DateTime 对象间的差值</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_diff(datetime1,datetime2,absolute);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date1&#x3D;date_create(&quot;2013-03-15&quot;);</span><br><span class="line">$date2&#x3D;date_create(&quot;2013-12-12&quot;);</span><br><span class="line">$diff&#x3D;date_diff($date1,$date2);</span><br><span class="line">echo $diff-&gt;format(&quot;%R%a days&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+272 days</span><br></pre></td></tr></table></figure>

<h3 id="date-format"><a href="#date-format" class="headerlink" title="date_format()"></a>date_format()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回一个根据指定格式进行格式化的日期。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_format(object,format);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create(&quot;2013-03-15&quot;);</span><br><span class="line">echo date_format($date,&quot;Y&#x2F;m&#x2F;d H:i:s&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013&#x2F;03&#x2F;15 00:00:00</span><br></pre></td></tr></table></figure>

<h3 id="date-get-last-errors"><a href="#date-get-last-errors" class="headerlink" title="date_get_last_errors()"></a>date_get_last_errors()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回解析日期字符串时找到的警告&#x2F;错误。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_get_last_errors();</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_create(&quot;gyuiyiuyui%&amp;&amp;&#x2F;&quot;);</span><br><span class="line">print_r(date_get_last_errors());</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [warning_count] &#x3D;&gt; 1 </span><br><span class="line">    [warnings] &#x3D;&gt; Array ( </span><br><span class="line">        [6] &#x3D;&gt; Double timezone specification</span><br><span class="line">    ) </span><br><span class="line">    [error_count] &#x3D;&gt; 5 </span><br><span class="line">    [errors] &#x3D;&gt; Array ( </span><br><span class="line">        [0] &#x3D;&gt; The timezone could not be found in the database</span><br><span class="line">        [10] &#x3D;&gt; Unexpected character</span><br><span class="line">        [11] &#x3D;&gt; Unexpected character </span><br><span class="line">        [12] &#x3D;&gt; Unexpected character </span><br><span class="line">        [13] &#x3D;&gt; Unexpected character </span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="date-interval-format"><a href="#date-interval-format" class="headerlink" title="date_interval_format()"></a>date_interval_format()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数是 DateInterval::format() 的别名 函数用于格式化时间间隔。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DateInterval::format(format);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date1&#x3D;date_create(&quot;2013-01-01&quot;);</span><br><span class="line">$date2&#x3D;date_create(&quot;2013-02-10&quot;);</span><br><span class="line">$diff&#x3D;date_diff($date1,$date2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; %a 输出两个日期间隔的总天数</span><br><span class="line">echo $diff-&gt;format(&quot;日期间隔的总天数为： %a 天。&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">日期间隔的总天数为： 40 天。</span><br></pre></td></tr></table></figure>

<h3 id="date-isodate-set"><a href="#date-isodate-set" class="headerlink" title="date_isodate_set()"></a>date_isodate_set()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_isodate_set() 函数根据 ISO 8601 标准设置日期，使用周和天的偏移量（而不是使用一个规定的日期）。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_isodate_set(object,year,week,day);</span><br><span class="line"></span><br><span class="line">day	可选。规定离一周中第一天的偏移量。默认为 1。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create();</span><br><span class="line"></span><br><span class="line">date_isodate_set($date,2013,5);</span><br><span class="line">echo date_format($date,&quot;Y-m-d&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">date_isodate_set($date,2013,5,2);</span><br><span class="line">echo date_format($date,&quot;Y-m-d&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013-01-28</span><br><span class="line">2013-01-29</span><br></pre></td></tr></table></figure>

<h3 id="date-modify"><a href="#date-modify" class="headerlink" title="date_modify()"></a>date_modify()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数修改时间戳。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_modify(object,modify);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create(&quot;2013-05-01&quot;);</span><br><span class="line">date_modify($date,&quot;+15 days&quot;);</span><br><span class="line">echo date_format($date,&quot;Y-m-d&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013-05-16</span><br></pre></td></tr></table></figure>

<h3 id="date-offset-get"><a href="#date-offset-get" class="headerlink" title="date_offset_get()"></a>date_offset_get()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回时区偏移。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_offset_get(object);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$winter&#x3D;date_create(&quot;2013-12-31&quot;,timezone_open(&quot;Europe&#x2F;Oslo&quot;));</span><br><span class="line">$summer&#x3D;date_create(&quot;2013-06-30&quot;,timezone_open(&quot;Europe&#x2F;Oslo&quot;));</span><br><span class="line"></span><br><span class="line">echo date_offset_get($winter) . &quot; seconds.&lt;br&gt;&quot;;</span><br><span class="line">echo date_offset_get($summer) . &quot; seconds.&quot;;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3600 seconds.</span><br><span class="line">7200 seconds.</span><br></pre></td></tr></table></figure>


<h3 id="date-parse-from-format"><a href="#date-parse-from-format" class="headerlink" title="date_parse_from_format()"></a>date_parse_from_format()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数根据指定的格式返回一个包含指定日期信息的关联数组。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_parse_from_format(format,date);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print_r(date_parse_from_format(&quot;mmddyyyy&quot;,&quot;05122013&quot;));</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;&quot;;</span><br><span class="line">print_r(date_parse_from_format(&quot;j.n.Y H:iP&quot;,&quot;12.5.2013 14:35+02:00&quot;));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [year] &#x3D;&gt; </span><br><span class="line">    [month] &#x3D;&gt; 12</span><br><span class="line">    [day] &#x3D;&gt; 13 </span><br><span class="line">    [hour] &#x3D;&gt; </span><br><span class="line">    [minute] &#x3D;&gt;</span><br><span class="line">    [second] &#x3D;&gt; </span><br><span class="line">    [fraction] &#x3D;&gt;</span><br><span class="line">    [warning_count] &#x3D;&gt; 0</span><br><span class="line">    [warnings] &#x3D;&gt; Array ( ) </span><br><span class="line">    [error_count] &#x3D;&gt; 1</span><br><span class="line">    [errors] &#x3D;&gt; Array ( [8] &#x3D;&gt; Data missing ) [is_localtime] &#x3D;&gt; </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Array ( </span><br><span class="line">    [year] &#x3D;&gt; 2013</span><br><span class="line">    [month] &#x3D;&gt; 5 </span><br><span class="line">    [day] &#x3D;&gt; 12 </span><br><span class="line">    [hour] &#x3D;&gt; 14</span><br><span class="line">    [minute] &#x3D;&gt; 35</span><br><span class="line">    [second] &#x3D;&gt; 0 </span><br><span class="line">    [fraction] &#x3D;&gt; </span><br><span class="line">    [warning_count] &#x3D;&gt; 0 </span><br><span class="line">    [warnings] &#x3D;&gt; Array ( ) </span><br><span class="line">    [error_count] &#x3D;&gt; 0</span><br><span class="line">    [errors] &#x3D;&gt; Array ( )</span><br><span class="line">    [is_localtime] &#x3D;&gt; 1</span><br><span class="line">    [zone_type] &#x3D;&gt; 1 </span><br><span class="line">    [zone] &#x3D;&gt; -120 </span><br><span class="line">    [is_dst] &#x3D;&gt; </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="date-parse"><a href="#date-parse" class="headerlink" title="date_parse()"></a>date_parse()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回一个包含指定日的详细信息的关联数组。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_parse(date);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print_r(date_parse(&quot;2013-05-01 12:30:45.5&quot;));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( </span><br><span class="line">    [year] &#x3D;&gt; 2013</span><br><span class="line">    [month] &#x3D;&gt; 5 </span><br><span class="line">    [day] &#x3D;&gt; 1 </span><br><span class="line">    [hour] &#x3D;&gt; 12 </span><br><span class="line">    [minute] &#x3D;&gt; 30</span><br><span class="line">    [second] &#x3D;&gt; 45 </span><br><span class="line">    [fraction] &#x3D;&gt; 0.5 </span><br><span class="line">    [warning_count] &#x3D;&gt; 0</span><br><span class="line">    [warnings] &#x3D;&gt; Array ( ) </span><br><span class="line">    [error_count] &#x3D;&gt; 0 </span><br><span class="line">    [errors] &#x3D;&gt; Array ( ) </span><br><span class="line">    [is_localtime] &#x3D;&gt; </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="date-sub"><a href="#date-sub" class="headerlink" title="date_sub()"></a>date_sub()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数从指定日期减去日、月、年、时、分和秒。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_sub(object,interval);</span><br><span class="line">object	必需。规定一个由 date_create() 返回的 DateTime 对象。</span><br><span class="line">interval	必需。规定一个 DateInterval 对象。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create(&quot;2013-03-15&quot;);</span><br><span class="line">date_sub($date,date_interval_create_from_date_string(&quot;40 days&quot;));</span><br><span class="line">echo date_format($date,&quot;Y-m-d&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013-02-03</span><br></pre></td></tr></table></figure>

<h3 id="date-sun-info"><a href="#date-sun-info" class="headerlink" title="date_sun_info()"></a>date_sun_info()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回一个包含有关指定日期与地点的日出&#x2F;日落和黄昏开始&#x2F;黄昏结束的信息的数组。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_sun_info(timestamp,latitude,longitude);</span><br><span class="line">timestamp	必需。规定时间戳。</span><br><span class="line">latitude	必需。规定纬度。</span><br><span class="line">longitude	必需。规定经度。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;&lt;h3&gt;Date: 1st January, 2013&lt;&#x2F;h3&gt;&quot;;</span><br><span class="line">$sun_info&#x3D;date_sun_info(strtotime(&quot;2013-01-01&quot;),31.7667,35.2333);</span><br><span class="line">foreach ($sun_info as $key&#x3D;&gt;$val)</span><br><span class="line">&#123;</span><br><span class="line">   echo &quot;$key: &quot; . date(&quot;H:i:s&quot;,$val) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;&lt;h3&gt;Date: 1st June, 2013&lt;&#x2F;h3&gt;&quot;;</span><br><span class="line">$sun_info&#x3D;date_sun_info(strtotime(&quot;2013-06-01&quot;),31.7667,35.2333);</span><br><span class="line">foreach ($sun_info as $key&#x3D;&gt;$val)</span><br><span class="line">&#123;</span><br><span class="line">   echo &quot;$key: &quot; . date(&quot;H:i:s&quot;,$val) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Date: 1st January, 2013</span><br><span class="line">sunrise: 23:39:11</span><br><span class="line">sunset: 09:46:51</span><br><span class="line">transit: 04:43:01</span><br><span class="line">civil_twilight_begin: 23:12:29</span><br><span class="line">civil_twilight_end: 10:13:33</span><br><span class="line">nautical_twilight_begin: 22:42:09</span><br><span class="line">nautical_twilight_end: 10:43:53</span><br><span class="line">astronomical_twilight_begin: 22:12:28</span><br><span class="line">astronomical_twilight_end: 11:13:34</span><br><span class="line">Date: 1st June, 2013</span><br><span class="line">sunrise: 22:34:03</span><br><span class="line">sunset: 12:39:59</span><br><span class="line">transit: 05:37:01</span><br><span class="line">civil_twilight_begin: 22:06:21</span><br><span class="line">civil_twilight_end: 13:07:40</span><br><span class="line">nautical_twilight_begin: 21:32:35</span><br><span class="line">nautical_twilight_end: 13:41:27</span><br><span class="line">astronomical_twilight_begin: 20:56:19</span><br><span class="line">astronomical_twilight_end: 14:17:42</span><br></pre></td></tr></table></figure>

<h3 id="date-sunrise"><a href="#date-sunrise" class="headerlink" title="date_sunrise()"></a>date_sunrise()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回指定日期与地点的日出时间。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_sunrise(timestamp,format,latitude,longitude,zenith,gmtoffset);</span><br><span class="line"></span><br><span class="line">timestamp	必需。规定要计算日出时间的日期时间戳。</span><br><span class="line">format	可选。规定如何返回结果：</span><br><span class="line">        SUNFUNCS_RET_STRING（以 string 格式返回结果，比如 16:46）（默认）</span><br><span class="line">        SUNFUNCS_RET_DOUBLE（以 float 格式返回结果，比如 16.78243132）</span><br><span class="line">        SUNFUNCS_RET_TIMESTAMP（以 integer 格式（时间戳）返回结果，比如 1095034606）</span><br><span class="line">latitude	可选。规定地点的纬度。默认是指北纬。因此如果要指定南纬，必须传递一个负值。</span><br><span class="line">longitude	可选。规定地点的经度。默认是指东经。因此如果要指定西经，必须传递一个负值。</span><br><span class="line">zenith	可选。默认为 date.sunrise_zenith。</span><br><span class="line">gmtoffset	可选。规定 GMT 与本地时间的差值。单位是小时。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Calculate the sunrise time for Lisbon, Portugal</span><br><span class="line">&#x2F;&#x2F;Latitude: 38.4 North</span><br><span class="line">&#x2F;&#x2F;Longitude: 9 West</span><br><span class="line">&#x2F;&#x2F;Zenith ~&#x3D; 90</span><br><span class="line">&#x2F;&#x2F;offset: +1 GMT</span><br><span class="line"></span><br><span class="line">echo(&quot;&lt;h2&gt;Lisbon, Portugal&lt;&#x2F;h2&gt;&quot;);</span><br><span class="line">echo(&quot;Date: &quot; . date(&quot;D M d Y&quot;));</span><br><span class="line">echo(&quot;&lt;br&gt;Sunrise time: &quot;);</span><br><span class="line">echo(date_sunrise(time(),SUNFUNCS_RET_STRING,38.4,-9,90,1));</span><br><span class="line">echo(&quot;&lt;br&gt;Sunset time: &quot;);</span><br><span class="line">echo(date_sunset(time(),SUNFUNCS_RET_STRING,38.4,-9,90,1));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lisbon, Portugal</span><br><span class="line">Date: Sat Sep 21 2013</span><br><span class="line">Sunrise time: 07:26</span><br><span class="line">Sunset time: 19:30</span><br></pre></td></tr></table></figure>

<h3 id="date-sunset"><a href="#date-sunset" class="headerlink" title="date_sunset()"></a>date_sunset()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回指定日期与地点的日落时间</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_sunset(timestamp,format,latitude,longitude,zenith,gmtoffset);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Calculate the sunrise time for Lisbon, Portugal</span><br><span class="line">&#x2F;&#x2F;Latitude: 38.4 North</span><br><span class="line">&#x2F;&#x2F;Longitude: 9 West</span><br><span class="line">&#x2F;&#x2F;Zenith ~&#x3D; 90</span><br><span class="line">&#x2F;&#x2F;offset: +1 GMT</span><br><span class="line"></span><br><span class="line">echo(&quot;&lt;h2&gt;Lisbon, Portugal&lt;&#x2F;h2&gt;&quot;);</span><br><span class="line">echo(&quot;Date: &quot; . date(&quot;D M d Y&quot;));</span><br><span class="line">echo(&quot;&lt;br&gt;Sunrise time: &quot;);</span><br><span class="line">echo(date_sunrise(time(),SUNFUNCS_RET_STRING,38.4,-9,90,1));</span><br><span class="line">echo(&quot;&lt;br&gt;Sunset time: &quot;);</span><br><span class="line">echo(date_sunset(time(),SUNFUNCS_RET_STRING,38.4,-9,90,1));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lisbon, Portugal</span><br><span class="line">Date: Sat Sep 21 2013</span><br><span class="line">Sunrise time: 07:26</span><br><span class="line">Sunset time: 19:30</span><br></pre></td></tr></table></figure>

<h3 id="date-time-set"><a href="#date-time-set" class="headerlink" title="date_time_set()"></a>date_time_set()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于设置时间</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_time_set(object,hour,minute,second);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create(&quot;2013-05-01&quot;);</span><br><span class="line"></span><br><span class="line">date_time_set($date,13,24);</span><br><span class="line">echo date_format($date,&quot;Y-m-d H:i:s&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">date_time_set($date,12,20,55);</span><br><span class="line">echo date_format($date,&quot;Y-m-d H:i:s&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013-05-01 13:24:00</span><br><span class="line">2013-05-01 12:20:55</span><br></pre></td></tr></table></figure>

<h3 id="date-time-set-1"><a href="#date-time-set-1" class="headerlink" title="date_time_set()"></a>date_time_set()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数用于设置时间</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_time_set(object,hour,minute,second);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create(&quot;2013-05-01&quot;);</span><br><span class="line"></span><br><span class="line">date_time_set($date,13,24);</span><br><span class="line">echo date_format($date,&quot;Y-m-d H:i:s&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">date_time_set($date,12,20,55);</span><br><span class="line">echo date_format($date,&quot;Y-m-d H:i:s&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013-05-01 13:24:00</span><br><span class="line">2013-05-01 12:20:55</span><br></pre></td></tr></table></figure>

<h3 id="date-timestamp-get"><a href="#date-timestamp-get" class="headerlink" title="date_timestamp_get()"></a>date_timestamp_get()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回 Unix 时间戳。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_timestamp_get(object);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create();</span><br><span class="line">echo date_timestamp_get($date);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1593657268</span><br></pre></td></tr></table></figure>

<h3 id="date-timestamp-get-1"><a href="#date-timestamp-get-1" class="headerlink" title="date_timestamp_get()"></a>date_timestamp_get()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回 Unix 时间戳。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_timestamp_get(object);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create();</span><br><span class="line">echo date_timestamp_get($date);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1593657268</span><br></pre></td></tr></table></figure>

<h3 id="date-timestamp-set"><a href="#date-timestamp-set" class="headerlink" title="date_timestamp_set()"></a>date_timestamp_set()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数设置基于 Unix 时间戳的日期和时间</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_timestamp_set(object,unixtimestamp);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create();</span><br><span class="line">date_timestamp_set($date,1371803321);</span><br><span class="line">echo date_format($date,&quot;U &#x3D; Y-m-d H:i:s&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1371803321 &#x3D; 2013-06-21 04:28:41</span><br></pre></td></tr></table></figure>

<h3 id="date-timezone-get"><a href="#date-timezone-get" class="headerlink" title="date_timezone_get()"></a>date_timezone_get()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回给定 DateTime 对象的时区。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_timezone_get(object);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create(null,timezone_open(&quot;Europe&#x2F;Paris&quot;));</span><br><span class="line">$tz&#x3D;date_timezone_get($date);</span><br><span class="line">echo timezone_name_get($tz);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Europe&#x2F;Paris</span><br></pre></td></tr></table></figure>

<h3 id="date-timezone-set"><a href="#date-timezone-set" class="headerlink" title="date_timezone_set()"></a>date_timezone_set()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数 DateTime 对象的时区</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_timezone_set(object,timezone);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create(&quot;2013-05-25&quot;,timezone_open(&quot;Indian&#x2F;Kerguelen&quot;));</span><br><span class="line">echo date_format($date,&quot;Y-m-d H:i:sP&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">date_timezone_set($date,timezone_open(&quot;Europe&#x2F;Paris&quot;));</span><br><span class="line">echo date_format($date,&quot;Y-m-d H:i:sP&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013-05-25 00:00:00+05:00</span><br><span class="line">2013-05-24 21:00:00+02:00</span><br></pre></td></tr></table></figure>

<h3 id="date-timezone-set-1"><a href="#date-timezone-set-1" class="headerlink" title="date_timezone_set()"></a>date_timezone_set()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数 DateTime 对象的时区</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_timezone_set(object,timezone);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$date&#x3D;date_create(&quot;2013-05-25&quot;,timezone_open(&quot;Indian&#x2F;Kerguelen&quot;));</span><br><span class="line">echo date_format($date,&quot;Y-m-d H:i:sP&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">date_timezone_set($date,timezone_open(&quot;Europe&#x2F;Paris&quot;));</span><br><span class="line">echo date_format($date,&quot;Y-m-d H:i:sP&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013-05-25 00:00:00+05:00</span><br><span class="line">2013-05-24 21:00:00+02:00</span><br></pre></td></tr></table></figure>

<h3 id="date"><a href="#date" class="headerlink" title="date()"></a>date()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数格式化本地日期和时间，并返回格式化的日期字符串。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date(format,timestamp);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置时区</span><br><span class="line">date_default_timezone_set(&quot;PRC&quot;);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 打印当前时间  PHP_EOL 换行符，兼容不同系统</span><br><span class="line">echo date(&quot;Y-m-d H:i:s&quot;)  . PHP_EOL;</span><br><span class="line">echo date(&quot;Y 年 m 月 d 日 H 点 i 分 s 秒&quot;)  . PHP_EOL;</span><br><span class="line">&#x2F;&#x2F; 指定时间</span><br><span class="line">$time &#x3D; strtotime(&quot;2018-01-18 08:08:08&quot;);  &#x2F;&#x2F; 将指定日期转成时间戳 </span><br><span class="line">echo date(&quot;Y-m-d H:i:s&quot;, $time)  . PHP_EOL;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-07-03 16:53:03</span><br><span class="line">2020 年 07 月 03 日 16 点 53 分 03 秒</span><br><span class="line">2018-01-18 08:08:08</span><br></pre></td></tr></table></figure>

<h3 id="getdate"><a href="#getdate" class="headerlink" title="getdate()"></a>getdate()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回某个时间戳或者当前本地的日期&#x2F;时间的日期&#x2F;时间信息。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getdate(timestamp);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print_r(getdate());</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [seconds] &#x3D;&gt; 4</span><br><span class="line">    [minutes] &#x3D;&gt; 54</span><br><span class="line">    [hours] &#x3D;&gt; 8</span><br><span class="line">    [mday] &#x3D;&gt; 3</span><br><span class="line">    [wday] &#x3D;&gt; 5</span><br><span class="line">    [mon] &#x3D;&gt; 7</span><br><span class="line">    [year] &#x3D;&gt; 2020</span><br><span class="line">    [yday] &#x3D;&gt; 184</span><br><span class="line">    [weekday] &#x3D;&gt; Friday</span><br><span class="line">    [month] &#x3D;&gt; July</span><br><span class="line">    [0] &#x3D;&gt; 1593766444</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="gettimeofday"><a href="#gettimeofday" class="headerlink" title="gettimeofday()"></a>gettimeofday()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回当前时间。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gettimeofday(return_float);</span><br><span class="line">return_float	可选。当设置为 TRUE 时，返回一个浮点数，而不是一个数组。默认是 FALSE。</span><br><span class="line"></span><br><span class="line">返回值：	默认返回一个关联数组，带有如下数组键名：</span><br><span class="line">[sec] - Unix 纪元以来的秒</span><br><span class="line">[usec] - 微秒</span><br><span class="line">[minuteswest] - 格林尼治以西的分</span><br><span class="line">[dsttime] - 夏令时修正类型</span><br><span class="line">如果 return_float 参数设置为 true，则返回一个浮点数。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Print the array from gettimeofday()</span><br><span class="line">print_r(gettimeofday());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Print the float from gettimeofday()</span><br><span class="line">echo gettimeofday(true);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [sec] &#x3D;&gt; 1593766542</span><br><span class="line">    [usec] &#x3D;&gt; 208317</span><br><span class="line">    [minuteswest] &#x3D;&gt; 0</span><br><span class="line">    [dsttime] &#x3D;&gt; 0</span><br><span class="line">)</span><br><span class="line">1593766542.2645</span><br></pre></td></tr></table></figure>

<h3 id="gmdate"><a href="#gmdate" class="headerlink" title="gmdate()"></a>gmdate()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数格式化 GMT&#x2F;UTC 日期和时间，并返回格式化的日期字符串</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gmdate(format,timestamp);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Prints the day</span><br><span class="line">echo gmdate(&quot;l&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Prints the day, date, month, year, time, AM or PM</span><br><span class="line">echo gmdate(&quot;l jS of F Y h:i:s A&quot;);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Friday</span><br><span class="line">Friday 3rd 2020f July 2020 08:59:03 AM</span><br></pre></td></tr></table></figure>

<h3 id="gmmktime"><a href="#gmmktime" class="headerlink" title="gmmktime()"></a>gmmktime()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回 GMT 日期的 UNIX 时间戳。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gmmktime(hour,minute,second,month,day,year,is_dst);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Prints: October 3, 1975 was on a Friday</span><br><span class="line">echo &quot;Oct 3, 1975 was on a &quot;.date(&quot;l&quot;, gmmktime(0,0,0,10,3,1975));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Oct 3, 1975 was on a Friday</span><br></pre></td></tr></table></figure>

<h3 id="gmstrftime"><a href="#gmstrftime" class="headerlink" title="gmstrftime()"></a>gmstrftime()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数根据区域设置格式化 GMT&#x2F;UTC 日期和时间。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gmstrftime(format,timestamp);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo(gmstrftime(&quot;%B %d %Y, %X %Z&quot;,mktime(20,0,0,12,31,98)).&quot;&lt;br&gt;&quot;);</span><br><span class="line"></span><br><span class="line">setlocale(LC_ALL,&quot;hu_HU.UTF8&quot;);</span><br><span class="line">echo(gmstrftime(&quot;%Y. %B %d. %A. %X %Z&quot;));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">January 01 1999, 01:00:00 Eastern Standard Time</span><br><span class="line">2013. September 21. Saturday. 15:10:22 Eastern Standard Time</span><br></pre></td></tr></table></figure>

<h3 id="idate"><a href="#idate" class="headerlink" title="idate()"></a>idate()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数格式化本地时间&#x2F;日期为整数。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">idate(format,timestamp);</span><br><span class="line">format  B - Swatch Beat&#x2F;Internet Time</span><br><span class="line">        d - 一个月中的第几天</span><br><span class="line">        h - 小时（12 小时制）</span><br><span class="line">        H - 小时（24 小时制）</span><br><span class="line">        i - 分</span><br><span class="line">        I - 如果启用夏令时则返回 1，否则返回 0</span><br><span class="line">        L - 如果闰年则返回 1，否则返回 0</span><br><span class="line">        m - 月份的数字</span><br><span class="line">        s - 秒</span><br><span class="line">        t - 本月的总天数</span><br><span class="line">        U - 自 Unix 纪元（January 1 1970 00:00:00 GMT）以来经过的秒数，与 time() 作用相同</span><br><span class="line">        w - 星期中的第几天（星期天是 0）</span><br><span class="line">        W - ISO-8601 格式年份中的第几个星期，每星期从星期一开始</span><br><span class="line">        y - 年份（1 或 2 位数字）</span><br><span class="line">        Y - 年份（4 位数字）</span><br><span class="line">        z - 一年中的第几天</span><br><span class="line">        Z - 以秒为单位的时区偏移量</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo idate(&quot;B&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;d&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;h&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;H&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;i&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;I&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;L&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;m&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;s&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;t&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;U&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;w&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;W&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;y&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;Y&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;z&quot;) . &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo idate(&quot;Z&quot;) . &quot;&lt;br&gt;&quot;;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">55</span><br><span class="line">4</span><br><span class="line">12</span><br><span class="line">0</span><br><span class="line">19</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">7</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">1593821970</span><br><span class="line">6</span><br><span class="line">27</span><br><span class="line">20</span><br><span class="line">2020</span><br><span class="line">185</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h3 id="localtime"><a href="#localtime" class="headerlink" title="localtime()"></a>localtime()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回本地时间。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localtime(timestamp,is_assoc);</span><br><span class="line"></span><br><span class="line">is_assoc	可选。规定返回关联数组还是数值数组。如果为 FALSE，则返回数值数组。如果为 TRUE，则返回关联数组。默认为 FALSE。</span><br><span class="line">关联数组的键名如下所示：</span><br><span class="line"></span><br><span class="line">    [tm_sec] - 秒数</span><br><span class="line">    [tm_min] - 分钟数</span><br><span class="line">    [tm_hour] - 小时</span><br><span class="line">    [tm_mday] - 月份中的第几天</span><br><span class="line">    [tm_mon] - 年份中的第几个月，从 0 开始表示一月份</span><br><span class="line">    [tm_year] - 年份，从 1900 开始</span><br><span class="line">    [tm_wday] - 星期中的第几天 (Sunday&#x3D;0)</span><br><span class="line">    [tm_yday] - 年中的第几天</span><br><span class="line">    [tm_isdst] - 夏令时当前是否生效</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print_r(localtime());</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;&quot;;</span><br><span class="line">print_r(localtime(time(),true));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; 37</span><br><span class="line">    [1] &#x3D;&gt; 21</span><br><span class="line">    [2] &#x3D;&gt; 0</span><br><span class="line">    [3] &#x3D;&gt; 4</span><br><span class="line">    [4] &#x3D;&gt; 6</span><br><span class="line">    [5] &#x3D;&gt; 120</span><br><span class="line">    [6] &#x3D;&gt; 6</span><br><span class="line">    [7] &#x3D;&gt; 185</span><br><span class="line">    [8] &#x3D;&gt; 0</span><br><span class="line">)</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [tm_sec] &#x3D;&gt; 37</span><br><span class="line">    [tm_min] &#x3D;&gt; 21</span><br><span class="line">    [tm_hour] &#x3D;&gt; 0</span><br><span class="line">    [tm_mday] &#x3D;&gt; 4</span><br><span class="line">    [tm_mon] &#x3D;&gt; 6</span><br><span class="line">    [tm_year] &#x3D;&gt; 120</span><br><span class="line">    [tm_wday] &#x3D;&gt; 6</span><br><span class="line">    [tm_yday] &#x3D;&gt; 185</span><br><span class="line">    [tm_isdst] &#x3D;&gt; 0</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="microtime"><a href="#microtime" class="headerlink" title="microtime()"></a>microtime()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回当前 Unix 时间戳的微秒数</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">microtime(get_as_float);</span><br><span class="line">get_as_float	可选。当设置为 TRUE 时，规定函数应该返回一个浮点数，否则返回一个字符串。默认为 FALSE。</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo(microtime());</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.48485500 1593822517</span><br></pre></td></tr></table></figure>

<h3 id="mktime"><a href="#mktime" class="headerlink" title="mktime()"></a>mktime()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回一个日期的 UNIX 时间戳</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mktime(hour,minute,second,month,day,year,is_dst);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Prints: October 3, 1975 was on a Friday</span><br><span class="line">echo &quot;Oct 3, 1975 was on a &quot;.date(&quot;l&quot;, mktime(0,0,0,10,3,1975));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Oct 3, 1975 was on a Friday</span><br></pre></td></tr></table></figure>

<h3 id="strftime"><a href="#strftime" class="headerlink" title="strftime()"></a>strftime()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数根据区域设置格式化本地日期和时间</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strftime(format,timestamp);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo(strftime(&quot;%B %d %Y, %X %Z&quot;,mktime(20,0,0,12,31,98)).&quot;&lt;br&gt;&quot;);</span><br><span class="line"></span><br><span class="line">setlocale(LC_ALL,&quot;hu_HU.UTF8&quot;);</span><br><span class="line">echo(strftime(&quot;%Y. %B %d. %A. %X %Z&quot;));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">December 31 1998, 20:00:00 CST</span><br><span class="line">2020. July 05. Sunday. 09:56:29 CST</span><br></pre></td></tr></table></figure>

<h3 id="strptime"><a href="#strptime" class="headerlink" title="strptime()"></a>strptime()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数解析由 strftime() 生成的时间&#x2F;日期。</span><br><span class="line">注意：该函数不能在 Windows 平台下实现！</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strptime(date,format);</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$format&#x3D;&quot;%d&#x2F;%m&#x2F;%Y %H:%M:%S&quot;;</span><br><span class="line">$strf&#x3D;strftime($format);</span><br><span class="line">echo(&quot;$strf&quot;);</span><br><span class="line">print_r(strptime($strf,$format));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">05&#x2F;07&#x2F;2020 02:00:47</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [tm_sec] &#x3D;&gt; 47</span><br><span class="line">    [tm_min] &#x3D;&gt; 0</span><br><span class="line">    [tm_hour] &#x3D;&gt; 2</span><br><span class="line">    [tm_mday] &#x3D;&gt; 5</span><br><span class="line">    [tm_mon] &#x3D;&gt; 6</span><br><span class="line">    [tm_year] &#x3D;&gt; 120</span><br><span class="line">    [tm_wday] &#x3D;&gt; 0</span><br><span class="line">    [tm_yday] &#x3D;&gt; 186</span><br><span class="line">    [unparsed] &#x3D;&gt; </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数返回自 Unix 纪元（January 1 1970 00:00:00 GMT）起的当前时间的秒数。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time();</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$t&#x3D;time();</span><br><span class="line">echo($t . &quot;&lt;br&gt;&quot;);</span><br><span class="line">echo(date(&quot;Y-m-d&quot;,$t));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1593914254</span><br><span class="line">2020-07-05</span><br></pre></td></tr></table></figure>

<h3 id="timezone-abbreviations-list"><a href="#timezone-abbreviations-list" class="headerlink" title="timezone_abbreviations_list()"></a>timezone_abbreviations_list()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回包含夏令时、偏移量和时区名称的关联数组</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time();</span><br></pre></td></tr></table></figure>
<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tzlist&#x3D;timezone_abbreviations_list();</span><br><span class="line">print_r($tzlist[&quot;act&quot;]);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [dst] &#x3D;&gt; </span><br><span class="line">            [offset] &#x3D;&gt; -18000</span><br><span class="line">            [timezone_id] &#x3D;&gt; America&#x2F;Porto_Acre</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [1] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [dst] &#x3D;&gt; </span><br><span class="line">            [offset] &#x3D;&gt; -18000</span><br><span class="line">            [timezone_id] &#x3D;&gt; America&#x2F;Eirunepe</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [2] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [dst] &#x3D;&gt; </span><br><span class="line">            [offset] &#x3D;&gt; -18000</span><br><span class="line">            [timezone_id] &#x3D;&gt; America&#x2F;Rio_Branco</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [3] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [dst] &#x3D;&gt; </span><br><span class="line">            [offset] &#x3D;&gt; -18000</span><br><span class="line">            [timezone_id] &#x3D;&gt; Brazil&#x2F;Acre</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><blockquote>
<p> <a href="https://www.runoob.com/php/php-ref-date.html" target="_blank" rel="noopener">《PHP 5 Date/Time 函数 | 菜鸟教程》</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/2020/07/12/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
    <content><![CDATA[<h2 id="建博目的"><a href="#建博目的" class="headerlink" title="建博目的"></a>建博目的</h2><ul>
<li><p>记录学习笔记。</p>
</li>
<li><p>分享手办开箱。（怎么开心，怎么来）</p>
</li>
</ul>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>PHP/Laravel/TP/fastadmin/小程序/公众号开发</p>
<ul>
<li><p>PHP 一般水平（正在熟悉内置 PHP 函数）</p>
</li>
<li><p>Laravel 做过个人博客，学过一个电商网站</p>
</li>
<li><p>TP  开发过项目</p>
</li>
<li><p>fastadmin 开发过项目</p>
</li>
<li><p>小程序 开发过项目 负责接口编写，以及 js 内调用接口的数据处理</p>
</li>
</ul>
<h2 id="爱好"><a href="#爱好" class="headerlink" title="爱好"></a>爱好</h2><p>游戏爱好者/电影爱好者/高达爱好者/手办爱好者/漫画爱好者</p>
<ul>
<li><p>游戏：<code>ps4</code>  <code>ps3</code> <code>ns</code> <code>3ds</code> <code>psp</code> <code>psv</code> 这些都玩。王者也打，本命英雄橘子。英雄联盟的话，只爱玩亚索 无他快乐就行（段位黑铁-人机水平。不过现在不玩了，比赛还是会看）现在主玩<code>ps4</code>、<code>ns</code>、王者。</p>
</li>
<li><p>电影：豆瓣排行榜看下来，看了百分之八十吧</p>
</li>
<li><p>高达：主角机爱好者，最喜欢强袭自由。</p>
</li>
<li><p>手办：龙珠、剑心、两仪式  暂时买了这些。</p>
</li>
<li><p>漫画：收藏了龙珠 剑心 东京喰种 棋魂 钢之炼金术师 …</p>
</li>
</ul>
]]></content>
      <categories>
        <category>关于我</category>
      </categories>
  </entry>
  <entry>
    <title>PHP 第七周函数学习记录</title>
    <url>/2020/07/19/PHP-%E7%AC%AC%E4%B8%83%E5%91%A8%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="trigger-error"><a href="#trigger-error" class="headerlink" title="trigger_error()"></a>trigger_error()</h3><p>作用</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trigger_error() 函数创建用户自定义的错误消息。</span><br><span class="line">trigger_error() 函数用于在用户指定的条件下触发一个错误消息。它可以与内建的错误处理程序一起使用，或者与由 set_error_handler() 函数设置的用户自定义函数一起使用。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trigger_error(error_message,error_types)</span><br><span class="line">error_message	必需。规定错误消息。长度限制为 1024 个字符。</span><br><span class="line">error_types	    可选。规定错误消息的错误类型。</span><br><span class="line">                可能的错误类型：</span><br><span class="line">                    E_USER_ERROR - 用户生成的运行时的致命错误。不能恢复的错误。停止执行脚本。</span><br><span class="line">                    E_USER_WARNING - 用户生成的运行时的非致命警告。脚本没有停止执行。</span><br><span class="line">                    E_USER_NOTICE - 默认。用户生成的运行时的通知。脚本发现可能是一个错误，但也可能在脚本正常运行时发生。</span><br></pre></td></tr></table></figure>


<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$test&#x3D;2;</span><br><span class="line">if ($test&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">    trigger_error(&quot;A custom error has been triggered&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Notice: A custom error has been triggered</span><br><span class="line">in C:webfoldertest.php on line 6</span><br></pre></td></tr></table></figure>

<h3 id="user-error"><a href="#user-error" class="headerlink" title="user_error()"></a>user_error()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该函数是 trigger_error() 函数的别名。</span><br></pre></td></tr></table></figure>

<h3 id="basename"><a href="#basename" class="headerlink" title="basename()"></a>basename()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">basename() 函数返回路径中的文件名部分。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">basename(path,suffix)</span><br><span class="line">path	必需。规定要检查的路径。</span><br><span class="line">suffix	可选。规定文件扩展名。如果文件有名有文件扩展名，将不会显示这个扩展名。</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$path &#x3D; &quot;&#x2F;testweb&#x2F;home.php&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Show filename with file extension</span><br><span class="line">echo basename($path) .&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Show filename without file extension</span><br><span class="line">echo basename($path,&quot;.php&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">home.php</span><br><span class="line">home</span><br></pre></td></tr></table></figure>


<h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp()"></a>chgrp()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chgrp() 函数改变指定文件的用户组。</span><br><span class="line">如果成功则返回 TRUE，如果失败则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chgrp(file,group)</span><br><span class="line">file	必需。规定要检查的文件。</span><br><span class="line">group	可选。规定新的组。可以是组名或组的 ID。</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">chgrp(&quot;test.txt&quot;,&quot;admin&quot;)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod()"></a>chmod()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod() 函数改变指定文件的权限。</span><br><span class="line">如果成功则返回 TRUE，如果失败则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod(file,mode)</span><br><span class="line">file	必需。规定要检查的文件。</span><br><span class="line">mode	必需。规定新的权限。</span><br><span class="line">        mode 参数由 4 个数字组成：&#x3D;</span><br><span class="line">            第一个数字通常是 0</span><br><span class="line">            第二个数字规定所有者的权限</span><br><span class="line">            第三个数字规定所有者所属的用户组的权限</span><br><span class="line">            第四个数字规定其他所有人的权限</span><br><span class="line">            可能的值（如需设置多个权限，请对下面的数字进行总计）：</span><br><span class="line">            </span><br><span class="line">            1 &#x3D; 执行权限</span><br><span class="line">            2 &#x3D; 写权限</span><br><span class="line">            4 &#x3D; 读权限</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; Read and write for owner, nothing for everybody else</span><br><span class="line">chmod(&quot;test.txt&quot;,0600);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Read and write for owner, read for everybody else</span><br><span class="line">chmod(&quot;test.txt&quot;,0644);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Everything for owner, read and execute for everybody else</span><br><span class="line">chmod(&quot;test.txt&quot;,0755);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Everything for owner, read for owner&#39;s group</span><br><span class="line">chmod(&quot;test.txt&quot;,0740);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="chown"><a href="#chown" class="headerlink" title="chown()"></a>chown()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown() 函数改变指定文件的所有者。</span><br><span class="line">如果成功则返回 TRUE，如果失败则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown(file,owner)</span><br><span class="line">file	必需。规定要检查的文件。</span><br><span class="line">owner	必需。规定新的所有者。可以是用户名或用户的 ID。</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">chown(&quot;test.txt&quot;,&quot;charles&quot;)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="clearstatcache"><a href="#clearstatcache" class="headerlink" title="clearstatcache()"></a>clearstatcache()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clearstatcache() 函数清除文件状态缓存。</span><br><span class="line">PHP 会缓存某些函数的返回信息，以便提供更高的性能。但是有时候，比如在一个脚本中多次检查同一个文件，而该文件在此脚本执行期间有被删除或修改的危险时，你需要清除文件状态缓存，以便获得正确的结果。要做到这一点，请使用 clearstatcache() 函数。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clearstatcache()</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;check filesize</span><br><span class="line">echo filesize(&quot;test.txt&quot;);</span><br><span class="line">echo &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line"></span><br><span class="line">$file &#x3D; fopen(&quot;test.txt&quot;, &quot;a+&quot;);</span><br><span class="line">&#x2F;&#x2F; truncate file</span><br><span class="line">ftruncate($file,100);</span><br><span class="line">fclose($file);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Clear cache and check filesize again</span><br><span class="line">clearstatcache();</span><br><span class="line">echo filesize(&quot;test.txt&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">792</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<h3 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy() 函数复制文件。</span><br><span class="line">该函数如果成功则返回 TRUE，如果失败则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy(file,to_file)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo copy(&quot;source.txt&quot;,&quot;target.txt&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="dirname"><a href="#dirname" class="headerlink" title="dirname()"></a>dirname()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dirname() 函数返回路径中的目录名称部分。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dirname(path)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo dirname(&quot;c:&#x2F;testweb&#x2F;home.php&quot;) . &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">echo dirname(&quot;&#x2F;testweb&#x2F;home.php&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:&#x2F;testweb</span><br><span class="line">&#x2F;testweb</span><br></pre></td></tr></table></figure>

<h3 id="disk-free-space"><a href="#disk-free-space" class="headerlink" title="disk_free_space()"></a>disk_free_space()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disk_free_space() 函数返回指定目录的可用空间，以字节为单位。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disk_free_space(directory)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo disk_free_space(&quot;C:&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">109693288448</span><br></pre></td></tr></table></figure>

<h3 id="disk-total-space"><a href="#disk-total-space" class="headerlink" title="disk_total_space()"></a>disk_total_space()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disk_total_space() 函数返回指定目录的磁盘总容量，以字节为单位。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disk_total_space(directory)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo disk_total_space(&quot;C:&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">119990349824</span><br></pre></td></tr></table></figure>

<h3 id="diskfreespace"><a href="#diskfreespace" class="headerlink" title="diskfreespace()"></a>diskfreespace()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diskfreespace() 函数返回指定目录的可用空间，以字节为单位。</span><br><span class="line">该函数是 disk_free_space() 函数的别名。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diskfreespace(directory)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo diskfreespace(&quot;C:&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">109693288448</span><br></pre></td></tr></table></figure>

<h3 id="fclose"><a href="#fclose" class="headerlink" title="fclose()"></a>fclose()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fclose() 函数关闭打开的文件。</span><br><span class="line">该函数如果成功则返回 TRUE，如果失败则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fclose(file)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; fopen(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class="line">&#x2F;&#x2F;some code to be executed</span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="feof"><a href="#feof" class="headerlink" title="feof()"></a>feof()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feof() 函数检查是否已到达文件末尾（EOF）。</span><br><span class="line">如果出错或者文件指针到了文件末尾（EOF）则返回 TRUE，否则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feof(file)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; fopen(&quot;test.txt&quot;, &quot;r&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Output a line of the file until the end is reached</span><br><span class="line">while(! feof($file))</span><br><span class="line">&#123;</span><br><span class="line">echo fgets($file). &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, this is a test file.</span><br><span class="line">There are three lines here.</span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure>


<h3 id="feof-1"><a href="#feof-1" class="headerlink" title="feof()"></a>feof()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feof() 函数检查是否已到达文件末尾（EOF）。</span><br><span class="line">如果出错或者文件指针到了文件末尾（EOF）则返回 TRUE，否则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feof(file)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; fopen(&quot;test.txt&quot;, &quot;r&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Output a line of the file until the end is reached</span><br><span class="line">while(! feof($file))</span><br><span class="line">&#123;</span><br><span class="line">echo fgets($file). &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, this is a test file.</span><br><span class="line">There are three lines here.</span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure>

<h3 id="fflush"><a href="#fflush" class="headerlink" title="fflush()"></a>fflush()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fflush() 函数向打开的文件写入所有的缓冲输出。</span><br><span class="line">如果成功则返回 TRUE，如果失败则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fflush(file)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; fopen(&quot;test.txt&quot;,&quot;r+&quot;);</span><br><span class="line">&#x2F;&#x2F; some code</span><br><span class="line">fflush($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="fgetc"><a href="#fgetc" class="headerlink" title="fgetc()"></a>fgetc()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fgetc() 函数从打开的文件中返回一个单一的字符。</span><br><span class="line">注释：该函数处理大文件非常缓慢，所以它不用于处理大文件。如果您需要从一个大文件依次读取一个字符，请使用 fgets() 依次读取一行数据，然后使用 fgetc() 依次处理行数据。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fgetc(file)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; fopen(&quot;test2.txt&quot;,&quot;r&quot;);</span><br><span class="line">echo fgetc($file);</span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H</span><br></pre></td></tr></table></figure>

<h3 id="fgetcsv"><a href="#fgetcsv" class="headerlink" title="fgetcsv()"></a>fgetcsv()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fgetcsv() 函数从打开的文件中解析一行，校验 CSV 字段。</span><br><span class="line"></span><br><span class="line">fgetcsv() 函数会在到达指定长度或读到文件末尾（EOF）时（以先到者为准），停止返回一个新行。</span><br><span class="line"></span><br><span class="line">该函数如果成功则以数组形式返回 CSV 字段，如果失败或者到达文件末尾（EOF）则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fgetcsv(file,length,separator,enclosure)</span><br><span class="line"></span><br><span class="line">file	必需。规定要检查的文件。</span><br><span class="line">length	可选。规定行的最大长度。必须大于 CSV 文件内最长的一行。如果忽略该参数（或者设置为 0），那么行长度就没有限制，不过可能会影响执行效率。</span><br><span class="line">注意：该参数在 PHP 5 之前的版本是必需的。</span><br><span class="line"></span><br><span class="line">separator	可选。设置字段分界符（只允许一个字符），默认值为逗号（ , ）。</span><br><span class="line">enclosure	可选。设置字段环绕符（只允许一个字符），默认值为双引号（ &quot; ）。</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; fopen(&quot;contacts.csv&quot;,&quot;r&quot;);</span><br><span class="line">print_r(fgetcsv($file));</span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br><span class="line">CSV 文件：</span><br><span class="line">Kai Jim, Refsnes, Stavanger, Norway</span><br><span class="line">Hege, Refsnes, Stavanger, Norway</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Kai Jim</span><br><span class="line">    [1] &#x3D;&gt; Refsnes</span><br><span class="line">    [2] &#x3D;&gt; Stavanger</span><br><span class="line">    [3] &#x3D;&gt; Norway</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; fopen(&quot;contacts.csv&quot;,&quot;r&quot;);</span><br><span class="line"></span><br><span class="line">while(! feof($file))</span><br><span class="line">&#123;</span><br><span class="line">print_r(fgetcsv($file));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br><span class="line">CSV 文件：</span><br><span class="line">Kai Jim, Refsnes, Stavanger, Norway</span><br><span class="line">Hege, Refsnes, Stavanger, Norway</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Kai Jim</span><br><span class="line">    [1] &#x3D;&gt; Refsnes</span><br><span class="line">    [2] &#x3D;&gt; Stavanger</span><br><span class="line">    [3] &#x3D;&gt; Norway</span><br><span class="line">)</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Hege</span><br><span class="line">    [1] &#x3D;&gt; Refsnes</span><br><span class="line">    [2] &#x3D;&gt; Stavanger</span><br><span class="line">    [3] &#x3D;&gt; Norway</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fgets() 函数从打开的文件中返回一行。</span><br><span class="line">fgets() 函数会在到达指定长度( length - 1 )、碰到换行符、读到文件末尾（EOF）时（以先到者为准），停止返回一个新行。</span><br><span class="line">如果失败该函数返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fgets(file,length)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; fopen(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class="line"> </span><br><span class="line">while(! feof($file))</span><br><span class="line">&#123;</span><br><span class="line">    echo fgets($file). &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, this is a test file.</span><br><span class="line">There are three lines here.</span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure>

<h3 id="fgetss"><a href="#fgetss" class="headerlink" title="fgetss()"></a>fgetss()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fgetss() 函数从打开的文件中返回一行，并过滤掉 HTML 和 PHP 标签。</span><br><span class="line">fgetss() 函数会在到达指定长度或读到文件末尾（EOF）时（以先到者为准），停止返回一个新行。</span><br><span class="line">如果失败该函数返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fgetss(file,length,tags)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test.html 代码内容：</span><br><span class="line">&lt;p&gt;&lt;b&gt;This is a paragraph.&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">PHP 代码：</span><br><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; fopen(&quot;test.html&quot;,&quot;r&quot;);</span><br><span class="line">echo fgetss($file);</span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is a paragraph.</span><br></pre></td></tr></table></figure>

<h3 id="file"><a href="#file" class="headerlink" title="file()"></a>file()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file() 函数把整个文件读入一个数组中。</span><br><span class="line">数组中的每个元素都是文件中相应的一行，包括换行符在内。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file(path,include_path,context)</span><br><span class="line">path	必需。规定要读取的文件。</span><br><span class="line">include_path	可选。如果您还想在 include_path（在 php.ini 中）中搜索文件的话，请设置该参数为 &#39;1&#39;。</span><br><span class="line">context	可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。若使用 NULL，则忽略。</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">print_r(file(&quot;test.txt&quot;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Hello World. Testing testing!</span><br><span class="line">    [1] &#x3D;&gt; Another day, another line.</span><br><span class="line">    [2] &#x3D;&gt; If the array picks up this line,</span><br><span class="line">    [3] &#x3D;&gt; then is it a pickup line?</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h3 id="file-exists"><a href="#file-exists" class="headerlink" title="file_exists()"></a>file_exists()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_exists() 函数检查文件或目录是否存在。</span><br><span class="line">如果指定的文件或目录存在则返回 TRUE，否则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_exists(path)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo file_exists(&quot;test.txt&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_get_contents() 把整个文件读入一个字符串中。</span><br><span class="line">该函数是用于把文件的内容读入到一个字符串中的首选方法。如果服务器操作系统支持，还会使用内存映射技术来增强性能。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_get_contents(path,include_path,context,start,max_length)</span><br><span class="line"></span><br><span class="line">path	必需。规定要读取的文件。</span><br><span class="line">include_path	可选。如果您还想在 include_path（在 php.ini 中）中搜索文件的话，请设置该参数为 &#39;1&#39;。</span><br><span class="line">context	可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。若使用 NULL，则忽略。</span><br><span class="line">start	可选。规定在文件中开始读取的位置。该参数是 PHP 5.1 中新增的。</span><br><span class="line">max_length	可选。规定读取的字节数。该参数是 PHP 5.1 中新增的。</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo file_get_contents(&quot;test.txt&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is a test file with test text.</span><br></pre></td></tr></table></figure>

<h3 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents()"></a>file_put_contents()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_put_contents() 函数把一个字符串写入文件中。</span><br><span class="line"></span><br><span class="line">该函数访问文件时，遵循以下规则：</span><br><span class="line"></span><br><span class="line">如果设置了 FILE_USE_INCLUDE_PATH，那么将检查 *filename* 副本的内置路径</span><br><span class="line">如果文件不存在，将创建一个文件</span><br><span class="line">打开文件</span><br><span class="line">如果设置了 LOCK_EX，那么将锁定文件</span><br><span class="line">如果设置了 FILE_APPEND，那么将移至文件末尾。否则，将会清除文件的内容</span><br><span class="line">向文件中写入数据</span><br><span class="line">关闭文件并对所有文件解锁</span><br><span class="line">如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int file_put_contents ( string $filename , mixed $data [, int $flags &#x3D; 0 [, resource $context ]] )</span><br><span class="line"></span><br><span class="line">file	必需。规定要写入数据的文件。如果文件不存在，则创建一个新文件。</span><br><span class="line">data	必需。规定要写入文件的数据。可以是字符串、数组或数据流。</span><br><span class="line">mode	可选。规定如何打开&#x2F;写入文件。可能的值：</span><br><span class="line">FILE_USE_INCLUDE_PATH</span><br><span class="line">FILE_APPEND</span><br><span class="line">LOCK_EX</span><br><span class="line">context	可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo file_put_contents(&quot;sites.txt&quot;,&quot;Runoob&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<h3 id="fileatime"><a href="#fileatime" class="headerlink" title="fileatime()"></a>fileatime()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fileatime() 函数返回指定文件的上次访问时间。</span><br><span class="line"></span><br><span class="line">如果成功，该函数将以 Unix 时间戳形式返回文件的上次访问时间。如果失败，则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fileatime(filename)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo fileatime(&quot;test.txt&quot;);</span><br><span class="line">echo &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;Last access: &quot;.date(&quot;F d Y H:i:s.&quot;,fileatime(&quot;test.txt&quot;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1140684501</span><br><span class="line">Last access: February 23 2006 09:48:21.</span><br></pre></td></tr></table></figure>

<h3 id="filectime"><a href="#filectime" class="headerlink" title="filectime()"></a>filectime()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filectime() 函数返回指定文件的上次修改时间。</span><br><span class="line"></span><br><span class="line">该函数将检查文件的日常修改情况和 inode 修改情况。inode 修改情况是指：权限的修改、所有者的修改、用户组的修改或其他元数据的修改。</span><br><span class="line"></span><br><span class="line">如果成功，该函数将以 Unix 时间戳形式返回文件的上次修改时间。如果失败，则返回 FALSE。</span><br><span class="line"></span><br><span class="line">注释：该函数的结果会被缓存。请使用 clearstatcache() 来清除缓存。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filectime(filename)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo filectime(&quot;test.txt&quot;);</span><br><span class="line">echo &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;Last change: &quot;.date(&quot;F d Y H:i:s.&quot;,filectime(&quot;test.txt&quot;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1138609592</span><br><span class="line">Last change: January 30 2006 09:26:32.</span><br></pre></td></tr></table></figure>

<h3 id="filegroup"><a href="#filegroup" class="headerlink" title="filegroup()"></a>filegroup()</h3><p>作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filegroup() 函数返回指定文件的组 ID。</span><br><span class="line">如果成功，该函数返回指定文件所属组的 ID。如果失败，则返回 FALSE。</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filegroup(filename)</span><br></pre></td></tr></table></figure>

<p>测试案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo filegroup(&quot;test.txt&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><blockquote>
<p> <a href="https://www.runoob.com/php/php-ref-filesystem.html" target="_blank" rel="noopener">《PHP 5 Filesystem 函数 | 菜鸟教程》</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
